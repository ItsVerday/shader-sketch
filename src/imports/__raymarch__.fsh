struct RayMarch{int iterations;int maxIterations;vec3 position;vec3 direction;float epsilon;bool finished;bool hit;float smallestDistance;vec3 closestPosition;float emission;};RayMarch create_raymarch(vec3 position,vec3 direction,int maxIterations){return RayMarch(0,maxIterations,position,direction,0.0001,false,false,999999999.,vec3(0.,0.,0.),0.);}RayMarch iterate_raymarch(RayMarch A,float B){A.iterations++;if(B<A.epsilon){A.finished=true;A.hit=true;return A;}if(A.iterations>A.maxIterations){A.finished=true;return A;}A.position+=normalize(A.direction)*B;float emission=1./(B+1.);if(A.emission<emission){A.emission=emission;}if(B<A.smallestDistance){A.smallestDistance=B;A.closestPosition=A.position;}return A;}vec3 raymarch_normal(float C,float D,float E,float F){return normalize(vec3(C-D,C-E,C-F));}float raymarch_ambient_occlusion(RayMarch A,float G){return pow(1.-G,float(A.iterations));}float raymarch_emission(RayMarch A,float H,float G){return H*G*(2./(1.+exp(-A.emission/H))-1.);}