!function(r){var n={};function e(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return r[t].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=r,e.c=n,e.d=function(r,n,t){e.o(r,n)||Object.defineProperty(r,n,{enumerable:!0,get:t})},e.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},e.t=function(r,n){if(1&n&&(r=e(r)),8&n)return r;if(4&n&&"object"==typeof r&&r&&r.__esModule)return r;var t=Object.create(null);if(e.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:r}),2&n&&"string"!=typeof r)for(var o in r)e.d(t,o,function(n){return r[n]}.bind(null,o));return t},e.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(n,"a",n),n},e.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},e.p="",e(e.s=25)}([function(r,n,e){"use strict";e.r(n),n.default="const float PI = 3.1415926535897932384626433832795;\r\n\r\nfloat map(float value, float a1, float a2, float b1, float b2) {\r\n    return (value - a1) / (a2 - a1) * (b2 - b1) + b1;\r\n}"},function(r,n,e){"use strict";e.r(n),n.default="struct RayMarch {\r\n    int iterations;\r\n    int maxIterations;\r\n    vec3 position;\r\n    vec3 direction;\r\n    float epsilon;\r\n    bool finished;\r\n    bool hit;\r\n    float smallestDistance;\r\n    vec3 closestPosition;\r\n    float emission;\r\n};\r\n\r\nRayMarch create_raymarch(vec3 position, vec3 direction, int maxIterations) {\r\n    return RayMarch(0, maxIterations, position, direction, 0.0001, false, false, 999999999., vec3(0., 0., 0.), 0.);\r\n}\r\n\r\nRayMarch iterate_raymarch(RayMarch rayMarch, float sdf) {\r\n    rayMarch.iterations++;\r\n\r\n    if (sdf < rayMarch.epsilon) {\r\n        rayMarch.finished = true;\r\n        rayMarch.hit = true;\r\n        return rayMarch;\r\n    }\r\n\r\n    if (rayMarch.iterations > rayMarch.maxIterations) {\r\n        rayMarch.finished = true;\r\n        return rayMarch;\r\n    }\r\n\r\n    rayMarch.position += normalize(rayMarch.direction) * sdf;\r\n    float emission = 1. / (sdf + 1.);\r\n\r\n    if (rayMarch.emission < emission) {\r\n        rayMarch.emission = emission;\r\n    }\r\n\r\n    if (sdf < rayMarch.smallestDistance) {\r\n        rayMarch.smallestDistance = sdf;\r\n        rayMarch.closestPosition = rayMarch.position;\r\n    }\r\n    \r\n    return rayMarch;\r\n}\r\n\r\nvec3 raymarch_normal(float center, float x, float y, float z) {\r\n    return normalize(vec3(center - x, center - y, center - z));\r\n}\r\n\r\nfloat raymarch_ambient_occlusion(RayMarch rayMarch, float intensity) {\r\n    return pow(1. - intensity, float(rayMarch.iterations));\r\n}\r\n\r\nfloat raymarch_emission(RayMarch rayMarch, float limit, float intensity) {\r\n    return limit * intensity * (2. / (1. + exp(-rayMarch.emission / limit)) - 1.);\r\n}"},function(r,n,e){"use strict";e.r(n),n.default="vec3 camera_look(float yaw, float pitch, float fov, float aspectRatio, vec2 screenPos) {\r\n    screenPos = screenPos * 2. - 1.;\r\n    pitch = pitch * PI / 180.;\r\n    yaw = yaw * PI / 180.;\r\n\r\n    fov /= 2.;\r\n\r\n    vec3 forward = vec3(cos(yaw) * cos(pitch), sin(pitch), sin(yaw) * cos(pitch));\r\n    vec3 up = vec3(cos(yaw) * cos(pitch + PI / 2.), sin(pitch + PI / 2.), sin(yaw) * cos(pitch + PI / 2.));\r\n    vec3 right = cross(forward, up);\r\n\r\n    screenPos.y /= aspectRatio;\r\n    float fovScale = tan(fov * PI / 180.);\r\n\r\n    up *= fovScale;\r\n    right *= fovScale;\r\n\r\n    return normalize(forward + right * screenPos.x + up * screenPos.y);\r\n}"},function(r,n,e){"use strict";e.r(n),n.default='[\r\n    "clover_noise_2d",\r\n    "clover_noise_3d"\r\n]'},function(r,n,e){"use strict";e.r(n),n.default="const float CLOVER_NOISE_2D_POINT_SPREAD = .3;\r\nconst float CLOVER_NOISE_2D_PI = radians(180.);\r\n\r\nfloat clover_noise_2d_hash(vec2 p) {\r\n    return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));\r\n}\r\n\r\nvec2 clover_noise_2d_offset(vec2 p, float hash) {\r\n    vec2 offset = vec2(sin(hash * PI * 100.), cos(hash * PI * 100.)) * floor(hash * 50. + 1.) * .01 + .5;\r\n    return p + offset * CLOVER_NOISE_2D_POINT_SPREAD * 2. + .5 - CLOVER_NOISE_2D_POINT_SPREAD;\r\n}\r\n\r\n/**\r\n * Finds the value of 2D clover noise at a certain location.\r\n *\r\n * @param vec2 p The 2D vector where clover noise will be calculated at.\r\n * @return float The value of clover noise at p, the 2D vector.\r\n */\r\nfloat clover_noise_2d(vec2 p) {\r\n    vec2 p_floor = floor(p);\r\n\r\n    vec2 c_11 = clover_noise_2d_offset(p_floor, clover_noise_2d_hash(p_floor));\r\n    vec2 c_10 = p_floor + vec2(0, -1);\r\n    c_10 = clover_noise_2d_offset(c_10, clover_noise_2d_hash(c_10));\r\n    vec2 c_12 = p_floor + vec2(0, 1);\r\n    c_12 = clover_noise_2d_offset(c_12, clover_noise_2d_hash(c_12));\r\n    vec2 c_01 = p_floor + vec2(-1, 0);\r\n    c_01 = clover_noise_2d_offset(c_01, clover_noise_2d_hash(c_01));\r\n    vec2 c_21 = p_floor + vec2(1, 0);\r\n    c_21 = clover_noise_2d_offset(c_21, clover_noise_2d_hash(c_21));\r\n\r\n    vec2 d_p_c11 = (p - c_11).yx;\r\n    vec2 m_p_c11 = d_p_c11 * c_11;\r\n\r\n    vec2 side_nx = m_p_c11 - d_p_c11 * c_01;\r\n    vec2 side_px = m_p_c11 - d_p_c11 * c_21;\r\n\r\n    vec2 a, c, d;\r\n\r\n    if ((side_nx.y - side_nx.x < 0. && p.x < c_11.x) || (side_px.y - side_px.x > 0. && p.x >= c_11.x)) {\r\n        vec2 side_py = m_p_c11 - d_p_c11 * c_12;\r\n\r\n        if (side_py.y - side_py.x > 0.) {\r\n            a = c_12;\r\n            c = c_01;\r\n            d = vec2(-1, 1);\r\n        } else {\r\n            a = c_21;\r\n            c = c_12;\r\n            d = vec2(1, 1);\r\n        }\r\n    } else {\r\n        vec2 side_ny = m_p_c11 - d_p_c11 * c_10;\r\n\r\n        if (side_ny.y - side_ny.x > 0.) {\r\n            a = c_10;\r\n            c = c_21;\r\n            d = vec2(1, -1);\r\n        } else {\r\n            a = c_01;\r\n            c = c_10;\r\n            d = vec2(-1, -1);\r\n        }\r\n    }\r\n\r\n    d = clover_noise_2d_offset(p_floor + d, clover_noise_2d_hash(p_floor + d));\r\n\r\n    vec2 f = a;\r\n    vec2 g = c;\r\n    vec2 h = d;\r\n\r\n    vec2 ac = a - c;\r\n    vec2 bd = c_11 - d;\r\n\r\n    if (ac.x * ac.x + ac.y * ac.y < bd.x * bd.x + bd.y * bd.y) {\r\n        vec2 pa = p - a;\r\n\r\n        if (pa.x * ac.y - pa.y * ac.x > 0.) {\r\n            h = c_11;\r\n        }\r\n    } else {\r\n        vec2 pb = p - c_11;\r\n\r\n        if (pb.x * bd.y - pb.y * bd.x > 0.) {\r\n            f = c_11;\r\n        } else {\r\n            g = c_11;\r\n        }\r\n    }\r\n\r\n    vec2 bc_v0 = g - f;\r\n    vec2 bc_v1 = h - f;\r\n    vec2 bc_v2 = p - f;\r\n    float den = 1. / (bc_v0.x * bc_v1.y - bc_v1.x * bc_v0.y);\r\n    float v = (bc_v2.x * bc_v1.y - bc_v1.x * bc_v2.y) * den;\r\n    float w = (bc_v0.x * bc_v2.y - bc_v2.x * bc_v0.y) * den;\r\n    float u = 1. - v - w;\r\n\r\n    v = v * v * v;\r\n    w = w * w * w;\r\n    u = u * u * u;\r\n    float s = 1. / (u + v + w);\r\n    v *= s;\r\n    w *= s;\r\n    u *= s;\r\n\r\n    float fv = clover_noise_2d_hash(f);\r\n    float gv = clover_noise_2d_hash(g);\r\n    float hv = clover_noise_2d_hash(h);\r\n\r\n    return u * fv + v * gv + w * hv;\r\n}\r\n\r\n/**\r\n * Finds the value of 2D fractal clover noise at a certain location.\r\n *\r\n * @param vec2 p The 2D vector where fractal clover noise will be calculated at.\r\n * @param int iterations The amount of iterations to perform for fractal noise. Capped at 10.\r\n * @return float The value of fractal clover noise at p, the 2D vector.\r\n */\r\nfloat fractal_clover_noise_2d(vec2 p, int iterations) {\r\n    float total = 0.;\r\n    float divide = 0.;\r\n\r\n    float scale = 1.;\r\n    float invScale = 1.;\r\n\r\n    for (int iter = 0; iter < 10; iter++) {\r\n        if (iter >= iterations) {\r\n            break;\r\n        }\r\n        \r\n        total += clover_noise_2d(p * invScale) * scale;\r\n        divide += scale;\r\n        \r\n        scale *= .4;\r\n        invScale *= 2.5;\r\n    }\r\n\r\n    return total / divide;\r\n}\r\n\r\n/**\r\n * Finds the value of 2D curl clover noise at a certain location.\r\n *\r\n * @param vec2 p The 2D vector where fractal clover noise will be calculated at.\r\n * @return vec2 The value of curl clover noise at p, the 2D vector.\r\n */\r\nvec2 curl_clover_noise_2d(vec2 p) {\r\n    const float DX = 0.01;\r\n\r\n    float v = clover_noise_2d(p);\r\n    float x = clover_noise_2d(p + vec2(DX, 0.));\r\n    float y = clover_noise_2d(p + vec2(0., DX));\r\n    return normalize(vec2(v - x, v - y));\r\n}\r\n\r\n/**\r\n * Finds the value of 2D curl fractal clover noise at a certain location.\r\n *\r\n * @param vec2 p The 2D vector where curl fractal clover noise will be calculated at.\r\n * @param int iterations The amount of iterations to perform for fractal noise. Capped at 10.\r\n * @return vec2 The value of curl fractal clover noise at p, the 2D vector.\r\n */\r\nvec2 curl_fractal_clover_noise_2d(vec2 p, int iterations) {\r\n    const float DX = 0.01;\r\n\r\n    float v = fractal_clover_noise_2d(p, iterations);\r\n    float x = fractal_clover_noise_2d(p + vec2(DX, 0.), iterations);\r\n    float y = fractal_clover_noise_2d(p + vec2(0., DX), iterations);\r\n    return normalize(vec2(v - x, v - y));\r\n}"},function(r,n,e){"use strict";e.r(n),n.default="const float CLOVER_NOISE_3D_POINT_SPREAD = .2;\r\nconst float CLOVER_NOISE_3D_PI = radians(180.);\r\n\r\nfloat clover_noise_3d_hash(vec3 p) {\r\n    return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x - p.z)) * sin(12.0 * p.z - sin(p.x * 10.0))));\r\n}\r\n\r\nvec3 clover_noise_3d_offset(vec3 p, float hash) {\r\n    float rotation = hash * PI * 2000.;\r\n    float height = (fract((floor(hash * 1000.) + .5) / 100.) - .5) * PI / 2.;\r\n    float layer = floor(hash * 10. + 1.) * .1;\r\n    vec3 offset = vec3(sin(rotation) * cos(height), sin(height), cos(rotation) * cos(height)) * layer + .5;\r\n    return p + offset * CLOVER_NOISE_3D_POINT_SPREAD * 2. + .5 - CLOVER_NOISE_3D_POINT_SPREAD;\r\n}\r\n\r\nbool clover_noise_3d_boundary(vec3 p, vec3 c_00, vec3 c_10, vec3 c_20, vec3 c_01, vec3 c_11, vec3 c_21, vec3 c_02, vec3 c_12, vec3 c_22) {\r\n    vec2 d_p_c11 = p.yx - c_11.yx;\r\n    vec2 m_p_c11 = d_p_c11 * c_11.xy;\r\n\r\n    vec2 side_nx = m_p_c11 - d_p_c11 * c_01.xy;\r\n    vec2 side_px = m_p_c11 - d_p_c11 * c_21.xy;\r\n\r\n    vec3 a, b, c, d;\r\n\r\n    if ((side_nx.y - side_nx.x < 0. && p.x < c_11.x) || (side_px.y - side_px.x > 0. && p.x >= c_11.x)) {\r\n        vec2 side_py = m_p_c11 - d_p_c11 * c_12.xy;\r\n\r\n        if (side_py.y - side_py.x > 0.) {\r\n            a = c_01;\r\n            b = c_02;\r\n            c = c_12;\r\n            d = c_11;\r\n        } else {\r\n            a = c_11;\r\n            b = c_12;\r\n            c = c_22;\r\n            d = c_21;\r\n        }\r\n    } else {\r\n        vec2 side_ny = m_p_c11 - d_p_c11 * c_10.xy;\r\n\r\n        if (side_ny.y - side_ny.x > 0.) {\r\n            a = c_10;\r\n            b = c_11;\r\n            c = c_21;\r\n            d = c_20;\r\n        } else {\r\n            a = c_00;\r\n            b = c_01;\r\n            c = c_11;\r\n            d = c_10;\r\n        }\r\n    }\r\n\r\n    vec3 f = a;\r\n    vec3 g = c;\r\n    vec3 h = d;\r\n\r\n    vec3 ac = a - c;\r\n    vec3 pa = p - a;\r\n\r\n    if (pa.x * ac.y - pa.y * ac.x > 0.) {\r\n        h = b;\r\n    }\r\n\r\n    vec2 bc_v0 = g.xy - f.xy;\r\n    vec2 bc_v1 = h.xy - f.xy;\r\n    vec2 bc_v2 = p.xy - f.xy;\r\n    float den = 1. / (bc_v0.x * bc_v1.y - bc_v1.x * bc_v0.y);\r\n    float v = (bc_v2.x * bc_v1.y - bc_v1.x * bc_v2.y) * den;\r\n    float w = (bc_v0.x * bc_v2.y - bc_v2.x * bc_v0.y) * den;\r\n    float u = 1. - v - w;\r\n\r\n    return p.z < u * f.z + v * g.z + w * h.z;\r\n}\r\n\r\n/**\r\n * Finds the value of 3D clover noise at a certain location.\r\n *\r\n * @param vec3 p The 3D vector where clover noise will be calculated at.\r\n * @return float The value of clover noise at p, the 3D vector.\r\n */\r\nfloat clover_noise_3d(vec3 p) {\r\n    vec3 p_floor = floor(p);\r\n\r\n    vec3 c_111 = clover_noise_3d_offset(p_floor, clover_noise_3d_hash(p_floor));\r\n    vec3 c_100 = p_floor + vec3(0, -1, -1);\r\n    c_100 = clover_noise_3d_offset(c_100, clover_noise_3d_hash(c_100));\r\n    vec3 c_010 = p_floor + vec3(-1, 0, -1);\r\n    c_010 = clover_noise_3d_offset(c_010, clover_noise_3d_hash(c_010));\r\n    vec3 c_110 = p_floor + vec3(0, 0, -1);\r\n    c_110 = clover_noise_3d_offset(c_110, clover_noise_3d_hash(c_110));\r\n    vec3 c_210 = p_floor + vec3(1, 0, -1);\r\n    c_210 = clover_noise_3d_offset(c_210, clover_noise_3d_hash(c_210));\r\n    vec3 c_120 = p_floor + vec3(0, 1, -1);\r\n    c_120 = clover_noise_3d_offset(c_120, clover_noise_3d_hash(c_120));\r\n    vec3 c_001 = p_floor + vec3(-1, -1, 0);\r\n    c_001 = clover_noise_3d_offset(c_001, clover_noise_3d_hash(c_001));\r\n    vec3 c_101 = p_floor + vec3(0, -1, 0);\r\n    c_101 = clover_noise_3d_offset(c_101, clover_noise_3d_hash(c_101));\r\n    vec3 c_201 = p_floor + vec3(1, -1, 0);\r\n    c_201 = clover_noise_3d_offset(c_201, clover_noise_3d_hash(c_201));\r\n    vec3 c_011 = p_floor + vec3(-1, 0, 0);\r\n    c_011 = clover_noise_3d_offset(c_011, clover_noise_3d_hash(c_011));\r\n    vec3 c_211 = p_floor + vec3(1, 0, 0);\r\n    c_211 = clover_noise_3d_offset(c_211, clover_noise_3d_hash(c_211));\r\n    vec3 c_021 = p_floor + vec3(-1, 1, 0);\r\n    c_021 = clover_noise_3d_offset(c_021, clover_noise_3d_hash(c_021));\r\n    vec3 c_121 = p_floor + vec3(0, 1, 0);\r\n    c_121 = clover_noise_3d_offset(c_121, clover_noise_3d_hash(c_121));\r\n    vec3 c_221 = p_floor + vec3(1, 1, 0);\r\n    c_221 = clover_noise_3d_offset(c_221, clover_noise_3d_hash(c_221));\r\n    vec3 c_102 = p_floor + vec3(0, -1, 1);\r\n    c_102 = clover_noise_3d_offset(c_102, clover_noise_3d_hash(c_102));\r\n    vec3 c_012 = p_floor + vec3(-1, 0, 1);\r\n    c_012 = clover_noise_3d_offset(c_012, clover_noise_3d_hash(c_012));\r\n    vec3 c_112 = p_floor + vec3(0, 0, 1);\r\n    c_112 = clover_noise_3d_offset(c_112, clover_noise_3d_hash(c_112));\r\n    vec3 c_212 = p_floor + vec3(1, 0, 1);\r\n    c_212 = clover_noise_3d_offset(c_212, clover_noise_3d_hash(c_212));\r\n    vec3 c_122 = p_floor + vec3(0, 1, 1);\r\n    c_122 = clover_noise_3d_offset(c_122, clover_noise_3d_hash(c_122));\r\n\r\n    bool x_bound = clover_noise_3d_boundary(p.yzx, c_100.yzx, c_110.yzx, c_120.yzx, c_101.yzx, c_111.yzx, c_121.yzx, c_102.yzx, c_112.yzx, c_122.yzx);\r\n    bool y_bound = clover_noise_3d_boundary(p.xzy, c_010.xzy, c_110.xzy, c_210.xzy, c_011.xzy, c_111.xzy, c_211.xzy, c_012.xzy, c_112.xzy, c_212.xzy);\r\n    bool z_bound = clover_noise_3d_boundary(    p,     c_001,     c_101,     c_201,     c_011,     c_111,     c_211,     c_021,     c_121,     c_221);\r\n\r\n    vec3 a, b, c, d, e, f, g, h;\r\n\r\n    if (x_bound) {\r\n        if (y_bound) {\r\n            if (z_bound) {\r\n                a = p_floor + vec3(-1, -1, -1);\r\n                b = c_001;\r\n                c = c_010;\r\n                d = c_011;\r\n                e = c_100;\r\n                f = c_101;\r\n                g = c_110;\r\n                h = c_111;\r\n\r\n                a = clover_noise_3d_offset(a, clover_noise_3d_hash(a));\r\n            } else {\r\n                a = c_001;\r\n                b = p_floor + vec3(-1, -1, 1);\r\n                c = c_011;\r\n                d = c_012;\r\n                e = c_101;\r\n                f = c_102;\r\n                g = c_111;\r\n                h = c_112;\r\n\r\n                b = clover_noise_3d_offset(b, clover_noise_3d_hash(b));\r\n            }\r\n        } else {\r\n            if (z_bound) {\r\n                a = c_010;\r\n                b = c_011;\r\n                c = p_floor + vec3(-1, 1, -1);\r\n                d = c_021;\r\n                e = c_110;\r\n                f = c_111;\r\n                g = c_120;\r\n                h = c_121;\r\n\r\n                c = clover_noise_3d_offset(c, clover_noise_3d_hash(c));\r\n            } else {\r\n                a = c_011;\r\n                b = c_012;\r\n                c = c_021;\r\n                d = p_floor + vec3(-1, 1, 1);\r\n                e = c_111;\r\n                f = c_112;\r\n                g = c_121;\r\n                h = c_122;\r\n\r\n                d = clover_noise_3d_offset(d, clover_noise_3d_hash(d));\r\n            }\r\n        }\r\n    } else {\r\n        if (y_bound) {\r\n            if (z_bound) {\r\n                a = c_100;\r\n                b = c_101;\r\n                c = c_110;\r\n                d = c_111;\r\n                e = p_floor + vec3(1, -1, -1);\r\n                f = c_201;\r\n                g = c_210;\r\n                h = c_211;\r\n\r\n                e = clover_noise_3d_offset(e, clover_noise_3d_hash(e));\r\n            } else {\r\n                a = c_101;\r\n                b = c_102;\r\n                c = c_111;\r\n                d = c_112;\r\n                e = c_201;\r\n                f = p_floor + vec3(1, -1, 1);\r\n                g = c_211;\r\n                h = c_212;\r\n\r\n                f = clover_noise_3d_offset(f, clover_noise_3d_hash(f));\r\n            }\r\n        } else {\r\n            if (z_bound) {\r\n                a = c_110;\r\n                b = c_111;\r\n                c = c_120;\r\n                d = c_121;\r\n                e = c_210;\r\n                f = c_211;\r\n                g = p_floor + vec3(1, 1, -1);\r\n                h = c_221;\r\n\r\n                g = clover_noise_3d_offset(g, clover_noise_3d_hash(g));\r\n            } else {\r\n                a = c_111;\r\n                b = c_112;\r\n                c = c_121;\r\n                d = c_122;\r\n                e = c_211;\r\n                f = c_212;\r\n                g = c_221;\r\n                h = p_floor + vec3(1, 1, 1);\r\n\r\n                h = clover_noise_3d_offset(h, clover_noise_3d_hash(h));\r\n            }\r\n        }\r\n    }\r\n\r\n    vec3 ah = a - h;\r\n    vec3 pa = p - a;\r\n    \r\n    vec3 plane_b_sum = cross(ah, b - h) * pa;\r\n    float plane_b = plane_b_sum.x + plane_b_sum.y + plane_b_sum.z;\r\n    vec3 plane_c_sum = cross(ah, c - h) * pa;\r\n    float plane_c = plane_c_sum.x + plane_c_sum.y + plane_c_sum.z;\r\n    vec3 plane_d_sum = cross(ah, d - h) * pa;\r\n    float plane_d = plane_d_sum.x + plane_d_sum.y + plane_d_sum.z;\r\n    vec3 plane_e_sum = cross(ah, e - h) * pa;\r\n    float plane_e = plane_e_sum.x + plane_e_sum.y + plane_e_sum.z;\r\n    vec3 plane_f_sum = cross(ah, f - h) * pa;\r\n    float plane_f = plane_f_sum.x + plane_f_sum.y + plane_f_sum.z;\r\n    vec3 plane_g_sum = cross(ah, g - h) * pa;\r\n    float plane_g = plane_g_sum.x + plane_g_sum.y + plane_g_sum.z;\r\n\r\n    vec3 i, j, k, l;\r\n    i = a;\r\n    j = h;\r\n\r\n    if (plane_b > 0. && plane_d <= 0.) {\r\n        k = b;\r\n        l = d;\r\n    } else if (plane_d > 0. && plane_c <= 0.) {\r\n        k = d;\r\n        l = c;\r\n    } else if (plane_c > 0. && plane_g <= 0.) {\r\n        k = c;\r\n        l = g;\r\n    } else if (plane_g > 0. && plane_e <= 0.) {\r\n        k = g;\r\n        l = e;\r\n    } else if (plane_e > 0. && plane_f <= 0.) {\r\n        k = e;\r\n        l = f;\r\n    } else {\r\n        k = f;\r\n        l = b;\r\n    }\r\n\r\n    vec3 bc_ap = p - i;\r\n    vec3 bc_bp = p - j;\r\n\r\n    vec3 bc_ab = j - i;\r\n    vec3 bc_ac = k - i;\r\n    vec3 bc_ad = l - i;\r\n\r\n    vec3 bc_bc = k - j;\r\n    vec3 bc_bd = l - j;\r\n\r\n    float bc_va6 = dot(bc_bp, cross(bc_bd, bc_bc));\r\n    float bc_vb6 = dot(bc_ap, cross(bc_ac, bc_ad));\r\n    float bc_vc6 = dot(bc_ap, cross(bc_ad, bc_ab));\r\n    float bc_vd6 = dot(bc_ap, cross(bc_ab, bc_ac));\r\n    float bc_v6 = 1. / dot(bc_ab, cross(bc_ac, bc_ad));\r\n\r\n    float v = bc_va6 * bc_v6;\r\n    float w = bc_vb6 * bc_v6;\r\n    float t = bc_vc6 * bc_v6;\r\n    float u = bc_vd6 * bc_v6;\r\n    \r\n    float fiu = u * u * u * (1. - v * w * t);\r\n    float fiv = v * v * v * (1. - u * w * t);\r\n    float fiw = w * w * w * (1. - v * u * t);\r\n    float fit = t * t * t * (1. - v * w * u);\r\n    float s = fiu + fiv + fiw + fit;\r\n    fiu /= s;\r\n    fiv /= s;\r\n    fiw /= s;\r\n    fit /= s;\r\n\r\n    float iv = clover_noise_3d_hash(i);\r\n    float jv = clover_noise_3d_hash(j);\r\n    float kv = clover_noise_3d_hash(k);\r\n    float lv = clover_noise_3d_hash(l);\r\n    \r\n    return fiv * iv + fiw * jv + fit * kv + fiu * lv;\r\n}\r\n\r\n/**\r\n * Finds the value of 3D fractal clover noise at a certain location.\r\n *\r\n * @param vec3 p The 3D vector where fractal clover noise will be calculated at.\r\n * @param int iterations The amount of iterations to perform for fractal noise. Capped at 10.\r\n * @return float The value of fractal clover noise at p, the 3D vector.\r\n */\r\nfloat fractal_clover_noise_3d(vec3 p, int iterations) {\r\n    float total = 0.;\r\n    float divide = 0.;\r\n\r\n    float scale = 1.;\r\n    float invScale = 1.;\r\n\r\n    for (int iter = 0; iter < 10; iter++) {\r\n        if (iter >= iterations) {\r\n            break;\r\n        }\r\n        \r\n        total += clover_noise_3d(p * invScale) * scale;\r\n        divide += scale;\r\n        \r\n        scale *= .4;\r\n        invScale *= 2.5;\r\n    }\r\n\r\n    return total / divide;\r\n}\r\n\r\n/**\r\n * Finds the value of 3D curl clover noise at a certain location.\r\n *\r\n * @param vec3 p The 3D vector where fractal clover noise will be calculated at.\r\n * @return vec3 The value of curl clover noise at p, the 3D vector.\r\n */\r\nvec3 curl_clover_noise_3d(vec3 p) {\r\n    const float DX = 0.01;\r\n\r\n    float v = clover_noise_3d(p);\r\n    float x = clover_noise_3d(p + vec3(DX, 0., 0.));\r\n    float y = clover_noise_3d(p + vec3(0., DX, 0.));\r\n    float z = clover_noise_3d(p + vec3(0., 0., DX));\r\n    return normalize(vec3(v - x, v - y, v - z));\r\n}\r\n\r\n/**\r\n * Finds the value of 3D curl fractal clover noise at a certain location.\r\n *\r\n * @param vec3 p The 3D vector where curl fractal clover noise will be calculated at.\r\n * @param int iterations The amount of iterations to perform for fractal noise. Capped at 10.\r\n * @return vec3 The value of curl fractal clover noise at p, the 3D vector.\r\n */\r\nvec3 curl_fractal_clover_noise_3d(vec3 p, int iterations) {\r\n    const float DX = 0.01;\r\n\r\n    float v = fractal_clover_noise_3d(p, iterations);\r\n    float x = fractal_clover_noise_3d(p + vec3(DX, 0., 0.), iterations);\r\n    float y = fractal_clover_noise_3d(p + vec3(0., DX, 0.), iterations);\r\n    float z = fractal_clover_noise_3d(p + vec3(0., 0., DX), iterations);\r\n    return normalize(vec3(v - x, v - y, v - z));\r\n}\r\n"},function(r,n,e){"use strict";e.r(n),n.default="vec3 RGBtoHSV(vec3 rgb) {\r\n float Cmax = max(rgb.r, max(rgb.g, rgb.b));\r\n float Cmin = min(rgb.r, min(rgb.g, rgb.b));\r\n float delta = Cmax - Cmin;\r\n\r\n vec3 hsv = vec3(0., 0., Cmax);\r\n\r\n if (Cmax > Cmin) {\r\n     hsv.y = delta / Cmax;\r\n\r\n     if (rgb.r == Cmax)\r\n         hsv.x = (rgb.g - rgb.b) / delta;\r\n     else {\r\n         if (rgb.g == Cmax)\r\n             hsv.x = 2. + (rgb.b - rgb.r) / delta;\r\n         else\r\n             hsv.x = 4. + (rgb.r - rgb.g) / delta;\r\n     }\r\n     hsv.x = fract(hsv.x / 6.);\r\n }\r\n return hsv;\r\n}\r\n\r\nvec3 HSVtoRGB(vec3 c) {\r\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\r\n}\r\n\r\nvec3 RGBtoHSL(vec3 color) {\r\n vec3 hsl; // init to 0 to avoid warnings ? (and reverse if + remove first part)\r\n\r\n float fmin = min(min(color.r, color.g), color.b); //Min. value of RGB\r\n float fmax = max(max(color.r, color.g), color.b); //Max. value of RGB\r\n float delta = fmax - fmin; //Delta RGB value\r\n\r\n hsl.z = (fmax + fmin) / 2.0; // Luminance\r\n\r\n if (delta == 0.0) //This is a gray, no chroma...\r\n {\r\n     hsl.x = 0.0; // Hue\r\n     hsl.y = 0.0; // Saturation\r\n } else //Chromatic data...\r\n {\r\n     if (hsl.z < 0.5)\r\n         hsl.y = delta / (fmax + fmin); // Saturation\r\n     else\r\n         hsl.y = delta / (2.0 - fmax - fmin); // Saturation\r\n\r\n     float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;\r\n     float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;\r\n     float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;\r\n\r\n     if (color.r == fmax)\r\n         hsl.x = deltaB - deltaG; // Hue\r\n     else if (color.g == fmax)\r\n         hsl.x = (1.0 / 3.0) + deltaR - deltaB; // Hue\r\n     else if (color.b == fmax)\r\n         hsl.x = (2.0 / 3.0) + deltaG - deltaR; // Hue\r\n\r\n     if (hsl.x < 0.0)\r\n         hsl.x += 1.0; // Hue\r\n     else if (hsl.x > 1.0)\r\n         hsl.x -= 1.0; // Hue\r\n }\r\n\r\n return hsl;\r\n}\r\n\r\nvec3 HSLtoRGB(vec3 c) {\r\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0);\r\n\r\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\r\n}"},function(r,n,e){"use strict";e.r(n),n.default='[\r\n    "perlin_noise",\r\n    "simplex_noise",\r\n    "clover_noise",\r\n    "voronoise"\r\n]'},function(r,n,e){"use strict";e.r(n),n.default='[\r\n    "perlin_noise_2d",\r\n    "perlin_noise_3d",\r\n    "perlin_noise_4d"\r\n]'},function(r,n,e){"use strict";e.r(n),n.default="vec4 perlin_noise_2d_permute(vec4 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\r\nvec2 perlin_noise_2d_fade(vec2 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }\r\n\r\nfloat perlin_noise_2d(vec2 P) {\r\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\r\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\r\n    Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\r\n    vec4 ix = Pi.xzxz;\r\n    vec4 iy = Pi.yyww;\r\n    vec4 fx = Pf.xzxz;\r\n    vec4 fy = Pf.yyww;\r\n    vec4 i = perlin_noise_2d_permute(perlin_noise_2d_permute(ix) + iy);\r\n    vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\r\n    vec4 gy = abs(gx) - 0.5;\r\n    vec4 tx = floor(gx + 0.5);\r\n    gx = gx - tx;\r\n    vec2 g00 = vec2(gx.x,gy.x);\r\n    vec2 g10 = vec2(gx.y,gy.y);\r\n    vec2 g01 = vec2(gx.z,gy.z);\r\n    vec2 g11 = vec2(gx.w,gy.w);\r\n    vec4 norm = 1.79284291400159 - 0.85373472095314 * \r\n    vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\r\n    g00 *= norm.x;\r\n    g01 *= norm.y;\r\n    g10 *= norm.z;\r\n    g11 *= norm.w;\r\n    float n00 = dot(g00, vec2(fx.x, fy.x));\r\n    float n10 = dot(g10, vec2(fx.y, fy.y));\r\n    float n01 = dot(g01, vec2(fx.z, fy.z));\r\n    float n11 = dot(g11, vec2(fx.w, fy.w));\r\n    vec2 fade_xy = perlin_noise_2d_fade(Pf.xy);\r\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\r\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\r\n    return (2.3 * n_xy) / 2. + .5;\r\n}\r\n\r\nfloat fractal_perlin_noise_2d(vec2 p, int iterations) {\r\n    float total = 0.;\r\n    float divide = 0.;\r\n\r\n    float scale = 1.;\r\n\r\n    for (int iter = 0; iter < 10; iter++) {\r\n        if (iter >= iterations) {\r\n            break;\r\n        }\r\n        \r\n        total += perlin_noise_2d(p / scale) * scale;\r\n        divide += scale;\r\n        \r\n        scale *= .5;\r\n    }\r\n\r\n    return total / divide;\r\n}\r\n\r\nvec2 curl_perlin_noise_2d(vec2 p) {\r\n    const float DX = 0.01;\r\n\r\n    float v = perlin_noise_2d(p);\r\n    float x = perlin_noise_2d(p + vec2(DX, 0.));\r\n    float y = perlin_noise_2d(p + vec2(0., DX));\r\n    return normalize(vec2(v - x, v - y));\r\n}\r\n\r\nvec2 curl_fractal_perlin_noise_2d(vec2 p, int iterations) {\r\n    const float DX = 0.01;\r\n\r\n    float v = fractal_perlin_noise_2d(p, iterations);\r\n    float x = fractal_perlin_noise_2d(p + vec2(DX, 0.), iterations);\r\n    float y = fractal_perlin_noise_2d(p + vec2(0., DX), iterations);\r\n    return normalize(vec2(v - x, v - y));\r\n}"},function(r,n,e){"use strict";e.r(n),n.default="vec4 perlin_noise_3d_permute(vec4 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\r\nvec4 perlin_noise_3d_taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\r\nvec3 perlin_noise_3d_fade(vec3 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }\r\n\r\nfloat perlin_noise_3d(vec3 P){\r\n    vec3 Pi0 = floor(P); // Integer part for indexing\r\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\r\n    Pi0 = mod(Pi0, 289.0);\r\n    Pi1 = mod(Pi1, 289.0);\r\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\r\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n    vec4 iz0 = Pi0.zzzz;\r\n    vec4 iz1 = Pi1.zzzz;\r\n\r\n    vec4 ixy = perlin_noise_3d_permute(perlin_noise_3d_permute(ix) + iy);\r\n    vec4 ixy0 = perlin_noise_3d_permute(ixy + iz0);\r\n    vec4 ixy1 = perlin_noise_3d_permute(ixy + iz1);\r\n\r\n    vec4 gx0 = ixy0 / 7.0;\r\n    vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\r\n    gx0 = fract(gx0);\r\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n    vec4 sz0 = step(gz0, vec4(0.0));\r\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n    vec4 gx1 = ixy1 / 7.0;\r\n    vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\r\n    gx1 = fract(gx1);\r\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n    vec4 sz1 = step(gz1, vec4(0.0));\r\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n    vec4 norm0 = perlin_noise_3d_taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n    g000 *= norm0.x;\r\n    g010 *= norm0.y;\r\n    g100 *= norm0.z;\r\n    g110 *= norm0.w;\r\n    vec4 norm1 = perlin_noise_3d_taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n    g001 *= norm1.x;\r\n    g011 *= norm1.y;\r\n    g101 *= norm1.z;\r\n    g111 *= norm1.w;\r\n\r\n    float n000 = dot(g000, Pf0);\r\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r\n    float n111 = dot(g111, Pf1);\r\n\r\n    vec3 fade_xyz = perlin_noise_3d_fade(Pf0);\r\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \r\n    return (2.2 * n_xyz) / 2. + .5;\r\n}\r\n\r\nfloat fractal_perlin_noise_3d(vec3 p, int iterations) {\r\n    float total = 0.;\r\n    float divide = 0.;\r\n\r\n    float scale = 1.;\r\n\r\n    for (int iter = 0; iter < 10; iter++) {\r\n        if (iter >= iterations) {\r\n            break;\r\n        }\r\n        \r\n        total += perlin_noise_3d(p / scale) * scale;\r\n        divide += scale;\r\n        \r\n        scale *= .5;\r\n    }\r\n\r\n    return total / divide;\r\n}\r\n\r\nvec3 curl_perlin_noise_3d(vec3 p) {\r\n    const float DX = 0.01;\r\n\r\n    float v = perlin_noise_3d(p);\r\n    float x = perlin_noise_3d(p + vec3(DX, 0., 0.));\r\n    float y = perlin_noise_3d(p + vec3(0., DX, 0.));\r\n    float z = perlin_noise_3d(p + vec3(0., 0., DX));\r\n    return normalize(vec3(v - x, v - y, v - x));\r\n}\r\n\r\nvec3 curl_fractal_perlin_noise_3d(vec3 p, int iterations) {\r\n    const float DX = 0.01;\r\n\r\n    float v = fractal_perlin_noise_3d(p, iterations);\r\n    float x = fractal_perlin_noise_3d(p + vec3(DX, 0., 0.), iterations);\r\n    float y = fractal_perlin_noise_3d(p + vec3(0., DX, 0.), iterations);\r\n    float z = fractal_perlin_noise_3d(p + vec3(0., 0., DX), iterations);\r\n    return normalize(vec3(v - x, v - y, v - z));\r\n}"},function(r,n,e){"use strict";e.r(n),n.default="vec4 perlin_noise_4d_permute(vec4 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\r\nvec4 perlin_noise_4d_taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\r\nvec4 perlin_noise_4d_fade(vec4 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }\r\n\r\nfloat perlin_noise_4d(vec4 P) {\r\n    vec4 Pi0 = floor(P); // Integer part for indexing\r\n    vec4 Pi1 = Pi0 + 1.0; // Integer part + 1\r\n    Pi0 = mod(Pi0, 289.0);\r\n    Pi1 = mod(Pi1, 289.0);\r\n    vec4 Pf0 = fract(P); // Fractional part for interpolation\r\n    vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\r\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n    vec4 iz0 = vec4(Pi0.zzzz);\r\n    vec4 iz1 = vec4(Pi1.zzzz);\r\n    vec4 iw0 = vec4(Pi0.wwww);\r\n    vec4 iw1 = vec4(Pi1.wwww);\r\n\r\n    vec4 ixy = perlin_noise_4d_permute(perlin_noise_4d_permute(ix) + iy);\r\n    vec4 ixy0 = perlin_noise_4d_permute(ixy + iz0);\r\n    vec4 ixy1 = perlin_noise_4d_permute(ixy + iz1);\r\n    vec4 ixy00 = perlin_noise_4d_permute(ixy0 + iw0);\r\n    vec4 ixy01 = perlin_noise_4d_permute(ixy0 + iw1);\r\n    vec4 ixy10 = perlin_noise_4d_permute(ixy1 + iw0);\r\n    vec4 ixy11 = perlin_noise_4d_permute(ixy1 + iw1);\r\n\r\n    vec4 gx00 = ixy00 / 7.0;\r\n    vec4 gy00 = floor(gx00) / 7.0;\r\n    vec4 gz00 = floor(gy00) / 6.0;\r\n    gx00 = fract(gx00) - 0.5;\r\n    gy00 = fract(gy00) - 0.5;\r\n    gz00 = fract(gz00) - 0.5;\r\n    vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\r\n    vec4 sw00 = step(gw00, vec4(0.0));\r\n    gx00 -= sw00 * (step(0.0, gx00) - 0.5);\r\n    gy00 -= sw00 * (step(0.0, gy00) - 0.5);\r\n\r\n    vec4 gx01 = ixy01 / 7.0;\r\n    vec4 gy01 = floor(gx01) / 7.0;\r\n    vec4 gz01 = floor(gy01) / 6.0;\r\n    gx01 = fract(gx01) - 0.5;\r\n    gy01 = fract(gy01) - 0.5;\r\n    gz01 = fract(gz01) - 0.5;\r\n    vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\r\n    vec4 sw01 = step(gw01, vec4(0.0));\r\n    gx01 -= sw01 * (step(0.0, gx01) - 0.5);\r\n    gy01 -= sw01 * (step(0.0, gy01) - 0.5);\r\n\r\n    vec4 gx10 = ixy10 / 7.0;\r\n    vec4 gy10 = floor(gx10) / 7.0;\r\n    vec4 gz10 = floor(gy10) / 6.0;\r\n    gx10 = fract(gx10) - 0.5;\r\n    gy10 = fract(gy10) - 0.5;\r\n    gz10 = fract(gz10) - 0.5;\r\n    vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\r\n    vec4 sw10 = step(gw10, vec4(0.0));\r\n    gx10 -= sw10 * (step(0.0, gx10) - 0.5);\r\n    gy10 -= sw10 * (step(0.0, gy10) - 0.5);\r\n\r\n    vec4 gx11 = ixy11 / 7.0;\r\n    vec4 gy11 = floor(gx11) / 7.0;\r\n    vec4 gz11 = floor(gy11) / 6.0;\r\n    gx11 = fract(gx11) - 0.5;\r\n    gy11 = fract(gy11) - 0.5;\r\n    gz11 = fract(gz11) - 0.5;\r\n    vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\r\n    vec4 sw11 = step(gw11, vec4(0.0));\r\n    gx11 -= sw11 * (step(0.0, gx11) - 0.5);\r\n    gy11 -= sw11 * (step(0.0, gy11) - 0.5);\r\n\r\n    vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\r\n    vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\r\n    vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\r\n    vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\r\n    vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\r\n    vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\r\n    vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\r\n    vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\r\n    vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\r\n    vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\r\n    vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\r\n    vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\r\n    vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\r\n    vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\r\n    vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\r\n    vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\r\n\r\n    vec4 norm00 = perlin_noise_4d_taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\r\n    g0000 *= norm00.x;\r\n    g0100 *= norm00.y;\r\n    g1000 *= norm00.z;\r\n    g1100 *= norm00.w;\r\n\r\n    vec4 norm01 = perlin_noise_4d_taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\r\n    g0001 *= norm01.x;\r\n    g0101 *= norm01.y;\r\n    g1001 *= norm01.z;\r\n    g1101 *= norm01.w;\r\n\r\n    vec4 norm10 = perlin_noise_4d_taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\r\n    g0010 *= norm10.x;\r\n    g0110 *= norm10.y;\r\n    g1010 *= norm10.z;\r\n    g1110 *= norm10.w;\r\n\r\n    vec4 norm11 = perlin_noise_4d_taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\r\n    g0011 *= norm11.x;\r\n    g0111 *= norm11.y;\r\n    g1011 *= norm11.z;\r\n    g1111 *= norm11.w;\r\n\r\n    float n0000 = dot(g0000, Pf0);\r\n    float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\r\n    float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\r\n    float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\r\n    float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\r\n    float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\r\n    float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\r\n    float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\r\n    float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\r\n    float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\r\n    float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\r\n    float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\r\n    float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\r\n    float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\r\n    float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\r\n    float n1111 = dot(g1111, Pf1);\r\n\r\n    vec4 fade_xyzw = perlin_noise_4d_fade(Pf0);\r\n    vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\r\n    vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\r\n    vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\r\n    vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\r\n    float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\r\n    return (2.2 * n_xyzw) / 2. + .5;\r\n}\r\n\r\nfloat fractal_perlin_noise_4d(vec4 p, int iterations) {\r\n    float total = 0.;\r\n    float divide = 0.;\r\n\r\n    float scale = 1.;\r\n\r\n    for (int iter = 0; iter < 10; iter++) {\r\n        if (iter >= iterations) {\r\n            break;\r\n        }\r\n        \r\n        total += perlin_noise_4d(p / scale) * scale;\r\n        divide += scale;\r\n        \r\n        scale *= .5;\r\n    }\r\n\r\n    return total / divide;\r\n}\r\n\r\nvec4 curl_perlin_noise_4d(vec4 p) {\r\n    const float DX = 0.01;\r\n\r\n    float v = perlin_noise_4d(p);\r\n    float x = perlin_noise_4d(p + vec4(DX, 0., 0., 0.));\r\n    float y = perlin_noise_4d(p + vec4(0., DX, 0., 0.));\r\n    float z = perlin_noise_4d(p + vec4(0., 0., DX, 0.));\r\n    float w = perlin_noise_4d(p + vec4(0., 0., 0., DX));\r\n    return normalize(vec4(v - x, v - y, v - x, v - w));\r\n}\r\n\r\nvec4 curl_fractal_perlin_noise_4d(vec4 p, int iterations) {\r\n    const float DX = 0.01;\r\n\r\n    float v = fractal_perlin_noise_4d(p, iterations);\r\n    float x = fractal_perlin_noise_4d(p + vec4(DX, 0., 0., 0.), iterations);\r\n    float y = fractal_perlin_noise_4d(p + vec4(0., DX, 0., 0.), iterations);\r\n    float z = fractal_perlin_noise_4d(p + vec4(0., 0., DX, 0.), iterations);\r\n    float w = fractal_perlin_noise_4d(p + vec4(0., 0., 0., DX), iterations);\r\n    return normalize(vec4(v - x, v - y, v - x, v - w));\r\n}"},function(r,n,e){"use strict";e.r(n),n.default='[\r\n    "sdf",\r\n    "__raymarch__",\r\n    "surface"\r\n]'},function(r,n,e){"use strict";e.r(n),n.default="float sdf_sphere_basic(vec3 pos) {\r\n    return length(pos) - 1.;\r\n}\r\n\r\nfloat sdf_sphere(vec3 pos, vec3 center, float radius) {\r\n    return sdf_sphere_basic((pos - center) / radius) * radius;\r\n}\r\n\r\nfloat sdf_box_basic(vec3 pos, vec3 scale) {\r\n    vec3 q = abs(pos) - scale;\r\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\r\n}\r\n\r\nfloat sdf_box(vec3 pos, vec3 a, vec3 b) {\r\n    vec3 diff = abs(a - b);\r\n    vec3 avg = (a + b) / 2.;\r\n\r\n    return sdf_box_basic(pos - avg, diff);\r\n}\r\n\r\nfloat sdf_plane(vec3 pos, vec4 n) {\r\n    return dot(pos, n.xyz) + n.w;\r\n}\r\n\r\nfloat sdf_union(float d1, float d2) {\r\n    return min(d1, d2);\r\n}\r\n\r\nfloat sdf_smooth_union(float d1, float d2, float k) {\r\n    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\r\n    return mix(d2, d1, h) - k * h * (1.0 - h);\r\n} \r\n\r\nfloat sdf_intersection(float d1, float d2) {\r\n    return max(d1, d2);\r\n}\r\n\r\nfloat sdf_smooth_intersection(float d1, float d2, float k) {\r\n    float h = clamp(0.5 - 0.5 * (d2 - d1) / k, 0.0, 1.0);\r\n    return mix(d2, d1, h) + k * h * (1.0 - h);\r\n}\r\n\r\nfloat sdf_subtraction(float d1, float d2) {\r\n    return sdf_intersection(d1, -d2);\r\n}\r\n\r\nfloat sdf_smooth_subtraction(float d1, float d2, float k) {\r\n    float h = clamp(0.5 - 0.5 * (d2 + d1) / k, 0.0, 1.0);\r\n    return mix(d2, -d1, h) + k * h * (1.0 - h);\r\n}"},function(r,n,e){"use strict";e.r(n),n.default='[\r\n    "simplex_noise_2d",\r\n    "simplex_noise_3d",\r\n    "simplex_noise_4d"\r\n]'},function(r,n,e){"use strict";e.r(n),n.default="vec3 simplex_noise_2d_permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\r\n\r\nfloat simplex_noise_2d(vec2 v) {\r\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439,\r\n        -0.577350269189626, 0.024390243902439);\r\n    vec2 i  = floor(v + dot(v, C.yy) );\r\n    vec2 x0 = v -   i + dot(i, C.xx);\r\n    vec2 i1;\r\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\r\n    vec4 x12 = x0.xyxy + C.xxzz;\r\n    x12.xy -= i1;\r\n    i = mod(i, 289.0);\r\n    vec3 p = simplex_noise_2d_permute( simplex_noise_2d_permute( i.y + vec3(0.0, i1.y, 1.0 ))\r\n    + i.x + vec3(0.0, i1.x, 1.0 ));\r\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\r\n    dot(x12.zw,x12.zw)), 0.0);\r\n    m = m*m ;\r\n    m = m*m ;\r\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\r\n    vec3 h = abs(x) - 0.5;\r\n    vec3 ox = floor(x + 0.5);\r\n    vec3 a0 = x - ox;\r\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\r\n    vec3 g;\r\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\r\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\r\n    return (130.0 * dot(m, g)) / 2. + .5;\r\n}\r\n\r\nfloat fractal_simplex_noise_2d(vec2 p, int iterations) {\r\n    float total = 0.;\r\n    float divide = 0.;\r\n\r\n    float scale = 1.;\r\n\r\n    for (int iter = 0; iter < 10; iter++) {\r\n        if (iter >= iterations) {\r\n            break;\r\n        }\r\n        \r\n        total += simplex_noise_2d(p / scale) * scale;\r\n        divide += scale;\r\n        \r\n        scale *= .5;\r\n    }\r\n\r\n    return total / divide;\r\n}\r\n\r\nvec2 curl_simplex_noise_2d(vec2 p) {\r\n    const float DX = 0.01;\r\n\r\n    float v = simplex_noise_2d(p);\r\n    float x = simplex_noise_2d(p + vec2(DX, 0.));\r\n    float y = simplex_noise_2d(p + vec2(0., DX));\r\n    return normalize(vec2(v - x, v - y));\r\n}\r\n\r\nvec2 curl_fractal_simplex_noise_2d(vec2 p, int iterations) {\r\n    const float DX = 0.01;\r\n\r\n    float v = fractal_simplex_noise_2d(p, iterations);\r\n    float x = fractal_simplex_noise_2d(p + vec2(DX, 0.), iterations);\r\n    float y = fractal_simplex_noise_2d(p + vec2(0., DX), iterations);\r\n    return normalize(vec2(v - x, v - y));\r\n}"},function(r,n,e){"use strict";e.r(n),n.default="vec4 simplex_noise_3d_permute(vec4 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\r\nvec4 simplex_noise_3d_taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\r\n\r\nfloat simplex_noise_3d(vec3 v) { \r\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\r\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\r\n\r\n    // First corner\r\n    vec3 i  = floor(v + dot(v, C.yyy) );\r\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\r\n\r\n    // Other corners\r\n    vec3 g = step(x0.yzx, x0.xyz);\r\n    vec3 l = 1.0 - g;\r\n    vec3 i1 = min( g.xyz, l.zxy );\r\n    vec3 i2 = max( g.xyz, l.zxy );\r\n\r\n    //  x0 = x0 - 0. + 0.0 * C \r\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\r\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\r\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\r\n\r\n    // Permutations\r\n    i = mod(i, 289.0 ); \r\n    vec4 p = simplex_noise_3d_permute( simplex_noise_3d_permute( simplex_noise_3d_permute( \r\n            i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\r\n        + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \r\n        + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\r\n\r\n    // Gradients\r\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\r\n    float n_ = 1.0/7.0; // N=7\r\n    vec3  ns = n_ * D.wyz - D.xzx;\r\n\r\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\r\n\r\n    vec4 x_ = floor(j * ns.z);\r\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\r\n\r\n    vec4 x = x_ *ns.x + ns.yyyy;\r\n    vec4 y = y_ *ns.x + ns.yyyy;\r\n    vec4 h = 1.0 - abs(x) - abs(y);\r\n\r\n    vec4 b0 = vec4( x.xy, y.xy );\r\n    vec4 b1 = vec4( x.zw, y.zw );\r\n\r\n    vec4 s0 = floor(b0)*2.0 + 1.0;\r\n    vec4 s1 = floor(b1)*2.0 + 1.0;\r\n    vec4 sh = -step(h, vec4(0.0));\r\n\r\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\r\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\r\n\r\n    vec3 p0 = vec3(a0.xy,h.x);\r\n    vec3 p1 = vec3(a0.zw,h.y);\r\n    vec3 p2 = vec3(a1.xy,h.z);\r\n    vec3 p3 = vec3(a1.zw,h.w);\r\n\r\n    //Normalise gradients\r\n    vec4 norm = simplex_noise_3d_taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\r\n    p0 *= norm.x;\r\n    p1 *= norm.y;\r\n    p2 *= norm.z;\r\n    p3 *= norm.w;\r\n\r\n    // Mix final noise value\r\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\r\n    m = m * m;\r\n    return (42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \r\n                                dot(p2,x2), dot(p3,x3) ) )) / 2. + .5;\r\n}\r\n\r\nfloat fractal_simplex_noise_3d(vec3 p, int iterations) {\r\n    float total = 0.;\r\n    float divide = 0.;\r\n\r\n    float scale = 1.;\r\n\r\n    for (int iter = 0; iter < 10; iter++) {\r\n        if (iter >= iterations) {\r\n            break;\r\n        }\r\n        \r\n        total += simplex_noise_3d(p / scale) * scale;\r\n        divide += scale;\r\n        \r\n        scale *= .5;\r\n    }\r\n\r\n    return total / divide;\r\n}\r\n\r\nvec3 curl_simplex_noise_3d(vec3 p) {\r\n    const float DX = 0.01;\r\n\r\n    float v = simplex_noise_3d(p);\r\n    float x = simplex_noise_3d(p + vec3(DX, 0., 0.));\r\n    float y = simplex_noise_3d(p + vec3(0., DX, 0.));\r\n    float z = simplex_noise_3d(p + vec3(0., 0., DX));\r\n    return normalize(vec3(v - x, v - y, v - x));\r\n}\r\n\r\nvec3 curl_fractal_simplex_noise_3d(vec3 p, int iterations) {\r\n    const float DX = 0.01;\r\n\r\n    float v = fractal_simplex_noise_3d(p, iterations);\r\n    float x = fractal_simplex_noise_3d(p + vec3(DX, 0., 0.), iterations);\r\n    float y = fractal_simplex_noise_3d(p + vec3(0., DX, 0.), iterations);\r\n    float z = fractal_simplex_noise_3d(p + vec3(0., 0., DX), iterations);\r\n    return normalize(vec3(v - x, v - y, v - z));\r\n}"},function(r,n,e){"use strict";e.r(n),n.default="vec4 simplex_noise_4d_permute(vec4 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\r\nfloat simplex_noise_4d_permute(float x) { return floor(mod(((x*34.0)+1.0)*x, 289.0)); }\r\nvec4 simplex_noise_4d_taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\r\nfloat simplex_noise_4d_taylorInvSqrt(float r) { return 1.79284291400159 - 0.85373472095314 * r; }\r\n\r\nvec4 simplex_noise_4d_grad(float j, vec4 ip) {\r\n    const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\r\n    vec4 p,s;\r\n\r\n    p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\r\n    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\r\n    s = vec4(lessThan(p, vec4(0.0)));\r\n    p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \r\n\r\n    return p;\r\n}\r\n\r\nfloat simplex_noise_4d(vec4 v) {\r\n    const vec2  C = vec2( 0.138196601125010504,  // (5 - sqrt(5))/20  G4\r\n                        0.309016994374947451); // (sqrt(5) - 1)/4   F4\r\n    // First corner\r\n    vec4 i  = floor(v + dot(v, C.yyyy) );\r\n    vec4 x0 = v -   i + dot(i, C.xxxx);\r\n\r\n    // Other corners\r\n\r\n    // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\r\n    vec4 i0;\r\n\r\n    vec3 isX = step( x0.yzw, x0.xxx );\r\n    vec3 isYZ = step( x0.zww, x0.yyz );\r\n    //  i0.x = dot( isX, vec3( 1.0 ) );\r\n    i0.x = isX.x + isX.y + isX.z;\r\n    i0.yzw = 1.0 - isX;\r\n\r\n    //  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\r\n    i0.y += isYZ.x + isYZ.y;\r\n    i0.zw += 1.0 - isYZ.xy;\r\n\r\n    i0.z += isYZ.z;\r\n    i0.w += 1.0 - isYZ.z;\r\n\r\n    // i0 now contains the unique values 0,1,2,3 in each channel\r\n    vec4 i3 = clamp( i0, 0.0, 1.0 );\r\n    vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\r\n    vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\r\n\r\n    //  x0 = x0 - 0.0 + 0.0 * C \r\n    vec4 x1 = x0 - i1 + 1.0 * C.xxxx;\r\n    vec4 x2 = x0 - i2 + 2.0 * C.xxxx;\r\n    vec4 x3 = x0 - i3 + 3.0 * C.xxxx;\r\n    vec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\r\n\r\n    // Permutations\r\n    i = mod(i, 289.0); \r\n    float j0 = simplex_noise_4d_permute( simplex_noise_4d_permute( simplex_noise_4d_permute( simplex_noise_4d_permute(i.w) + i.z) + i.y) + i.x);\r\n    vec4 j1 = simplex_noise_4d_permute( simplex_noise_4d_permute( simplex_noise_4d_permute( simplex_noise_4d_permute (\r\n            i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\r\n        + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\r\n        + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\r\n        + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\r\n    // Gradients\r\n    // ( 7*7*6 points uniformly over a cube, mapped onto a 4-octahedron.)\r\n    // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\r\n\r\n    vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\r\n\r\n    vec4 p0 = simplex_noise_4d_grad(j0,   ip);\r\n    vec4 p1 = simplex_noise_4d_grad(j1.x, ip);\r\n    vec4 p2 = simplex_noise_4d_grad(j1.y, ip);\r\n    vec4 p3 = simplex_noise_4d_grad(j1.z, ip);\r\n    vec4 p4 = simplex_noise_4d_grad(j1.w, ip);\r\n\r\n    // Normalise gradients\r\n    vec4 norm = simplex_noise_4d_taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\r\n    p0 *= norm.x;\r\n    p1 *= norm.y;\r\n    p2 *= norm.z;\r\n    p3 *= norm.w;\r\n    p4 *= simplex_noise_4d_taylorInvSqrt(dot(p4,p4));\r\n\r\n    // Mix contributions from the five corners\r\n    vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\r\n    vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\r\n    m0 = m0 * m0;\r\n    m1 = m1 * m1;\r\n    return (49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\r\n            + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) )) / 2. + .5;\r\n\r\n}\r\n\r\nfloat fractal_simplex_noise_4d(vec4 p, int iterations) {\r\n    float total = 0.;\r\n    float divide = 0.;\r\n\r\n    float scale = 1.;\r\n\r\n    for (int iter = 0; iter < 10; iter++) {\r\n        if (iter >= iterations) {\r\n            break;\r\n        }\r\n        \r\n        total += simplex_noise_4d(p / scale) * scale;\r\n        divide += scale;\r\n        \r\n        scale *= .5;\r\n    }\r\n\r\n    return total / divide;\r\n}\r\n\r\nvec4 curl_simplex_noise_4d(vec4 p) {\r\n    const float DX = 0.01;\r\n\r\n    float v = simplex_noise_4d(p);\r\n    float x = simplex_noise_4d(p + vec4(DX, 0., 0., 0.));\r\n    float y = simplex_noise_4d(p + vec4(0., DX, 0., 0.));\r\n    float z = simplex_noise_4d(p + vec4(0., 0., DX, 0.));\r\n    float w = simplex_noise_4d(p + vec4(0., 0., 0., DX));\r\n    return normalize(vec4(v - x, v - y, v - x, v - w));\r\n}\r\n\r\nvec4 curl_fractal_simplex_noise_4d(vec4 p, int iterations) {\r\n    const float DX = 0.01;\r\n\r\n    float v = fractal_simplex_noise_4d(p, iterations);\r\n    float x = fractal_simplex_noise_4d(p + vec4(DX, 0., 0., 0.), iterations);\r\n    float y = fractal_simplex_noise_4d(p + vec4(0., DX, 0., 0.), iterations);\r\n    float z = fractal_simplex_noise_4d(p + vec4(0., 0., DX, 0.), iterations);\r\n    float w = fractal_simplex_noise_4d(p + vec4(0., 0., 0., DX), iterations);\r\n    return normalize(vec4(v - x, v - y, v - x, v - w));\r\n}"},function(r,n,e){"use strict";e.r(n),n.default="struct Surface {\r\n    int id;\r\n    float distance;\r\n\r\n    vec3 diffuse;\r\n    vec3 ambient;\r\n    vec3 specular;\r\n};\r\n\r\nSurface create_surface(int id) {\r\n    return Surface(id, 999999999., vec3(0., 0., 0.), vec3(0., 0., 0.), vec3(0., 0., 0.));\r\n}\r\n\r\nSurface compare_surfaces(Surface a, Surface b) {\r\n    if (a.distance < b.distance) {\r\n        return a;\r\n    }\r\n\r\n    return b;\r\n}\r\n\r\nvec3 surface_color(Surface surface, vec3 look, vec3 normal, vec3 lightDirection) {\r\n    look = normalize(look);\r\n    normal = normalize(normal);\r\n    lightDirection = normalize(lightDirection);\r\n\r\n    float cosTheta = clamp(dot(normal, lightDirection), 0., 1.);\r\n    vec3 reflection = reflect(-lightDirection, normal);\r\n    float cosAlpha = clamp(dot(look, reflection), 0., 1.);\r\n\r\n    vec3 finalColor = surface.ambient;\r\n    finalColor += surface.diffuse * cosTheta;\r\n    finalColor += surface.specular * pow(cosAlpha, 5.);\r\n\r\n    return finalColor;\r\n}"},function(r,n,e){"use strict";e.r(n),n.default='[\r\n    "voronoise_2d",\r\n    "voronoise_3d"\r\n]'},function(r,n,e){"use strict";e.r(n),n.default="float voronoise_2d_hash(vec2 p) {\r\n    return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));\r\n}\r\n\r\nvec2 voronoise_2d_hash2d(vec2 p) {\r\n    return vec2(voronoise_2d_hash(p + vec2(0.5, 0)), voronoise_2d_hash(p + vec2(0, 0.5)));\r\n}\r\n\r\n// From https://www.iquilezles.org/www/articles/voronoise/voronoise.htm\r\nfloat voronoise_2d(vec2 p, float u, float v) {\r\n    vec2 p_floor = floor(p);\r\n    vec2 f = fract(p);\r\n\r\n    float k = 1.0 - v;\r\n    k = k * k;\r\n    k = k * k;\r\n    k = 1.0 + 63.0 * k;\r\n    float va = 0.0;\r\n    float wt = 0.0;\r\n\r\n    for (int x = -2; x <= 2; x++) {\r\n        for (int y = -2; y <= 2; y++) {\r\n            vec2 g = vec2(x, y);\r\n            float value = voronoise_2d_hash(p_floor + g);\r\n            vec2 o = voronoise_2d_hash2d(p_floor + g) * u;\r\n            vec2 r = g - f + o;\r\n            float d = dot(r, r);\r\n            float w = pow(1. - smoothstep(0.0, 2., sqrt(d)), k);\r\n            va += w * value;\r\n            wt += w;\r\n        }\r\n    }\r\n\r\n    return va / wt;\r\n}\r\n\r\nfloat fractal_voronoise_2d(vec2 p, float u, float v, int iterations) {\r\n    float total = 0.;\r\n    float divide = 0.;\r\n\r\n    float scale = 1.;\r\n    float invScale = 1.;\r\n\r\n    for (int iter = 0; iter < 10; iter++) {\r\n        if (iter >= iterations) {\r\n            break;\r\n        }\r\n        \r\n        total += voronoise_2d(p * invScale, u, v) * scale;\r\n        divide += scale;\r\n        \r\n        scale *= .4;\r\n        invScale *= 2.5;\r\n    }\r\n\r\n    return total / divide;\r\n}\r\n\r\nvec2 curl_voronoise_2d(vec2 p, float u, float v) {\r\n    const float DX = 0.01;\r\n\r\n    float val = voronoise_2d(p, u, v);\r\n    float x = voronoise_2d(p + vec2(DX, 0.), u, v);\r\n    float y = voronoise_2d(p + vec2(0., DX), u, v);\r\n    return normalize(vec2(val - x, val - y));\r\n}\r\n\r\nvec2 curl_fractal_voronoise_2d(vec2 p, float u, float v, int iterations) {\r\n    const float DX = 0.01;\r\n\r\n    float val = fractal_voronoise_2d(p, u, v, iterations);\r\n    float x = fractal_voronoise_2d(p + vec2(DX, 0.), u, v, iterations);\r\n    float y = fractal_voronoise_2d(p + vec2(0., DX), u, v, iterations);\r\n    return normalize(vec2(val - x, val - y));\r\n}"},function(r,n,e){"use strict";e.r(n),n.default="float voronoise_3d_hash(vec3 p) {\r\n    return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x - p.z)) * sin(12.0 * p.z - sin(p.x * 10.0))));\r\n}\r\n\r\nvec3 voronoise_3d_hash3d(vec3 p) {\r\n    return vec3(voronoise_3d_hash(p + vec3(0.5, 0, 0)), voronoise_3d_hash(p + vec3(0, 0.5, 0)), voronoise_3d_hash(p + vec3(0, 0, 0.5)));\r\n}\r\n\r\n// From https://www.iquilezles.org/www/articles/voronoise/voronoise.htm and https://www.shadertoy.com/view/4ljGzW\r\nfloat voronoise_3d(vec3 p, float u, float v) {\r\n    vec3 p_floor = floor(p);\r\n    vec3 f = fract(p);\r\n\r\n    float k = 1.0 - v;\r\n    k = k * k;\r\n    k = k * k;\r\n    k = 1.0 + 31.0 * k;\r\n    float va = 0.0;\r\n    float wt = 0.0;\r\n\r\n    for (int x = -2; x <= 2; x++) {\r\n        for (int y = -2; y <= 2; y++) {\r\n            for (int z = -2; z <= 2; z++) {\r\n                vec3 g = vec3(x, y, z);\r\n                float value = voronoise_3d_hash(p_floor + g);\r\n                vec3 o = voronoise_3d_hash3d(p_floor + g) * u;\r\n                vec3 r = g - f + o;\r\n                float d = dot(r, r);\r\n                float w = pow(1. - smoothstep(0.0, 2., sqrt(d)), k);\r\n                va += w * value;\r\n                wt += w;\r\n            }\r\n        }\r\n    }\r\n\r\n    return va / wt;\r\n}\r\n\r\nfloat fractal_voronoise_3d(vec3 p, float u, float v, int iterations) {\r\n    float total = 0.;\r\n    float divide = 0.;\r\n\r\n    float scale = 1.;\r\n    float invScale = 1.;\r\n\r\n    for (int iter = 0; iter < 10; iter++) {\r\n        if (iter >= iterations) {\r\n            break;\r\n        }\r\n        \r\n        total += voronoise_3d(p * invScale, u, v) * scale;\r\n        divide += scale;\r\n        \r\n        scale *= .4;\r\n        invScale *= 2.5;\r\n    }\r\n\r\n    return total / divide;\r\n}\r\n\r\nvec3 curl_voronoise_3d(vec3 p, float u, float v) {\r\n    const float DX = 0.01;\r\n\r\n    float val = voronoise_3d(p, u, v);\r\n    float x = voronoise_3d(p + vec3(DX, 0., 0.), u, v);\r\n    float y = voronoise_3d(p + vec3(0., DX, 0.), u, v);\r\n    float z = voronoise_3d(p + vec3(0., 0., DX), u, v);\r\n    return normalize(vec3(val - x, val - y, val - z));\r\n}\r\n\r\nvec3 curl_fractal_voronoise_3d(vec3 p, float u, float v, int iterations) {\r\n    const float DX = 0.01;\r\n\r\n    float val = fractal_voronoise_3d(p, u, v, iterations);\r\n    float x = fractal_voronoise_3d(p + vec3(DX, 0., 0.), u, v, iterations);\r\n    float y = fractal_voronoise_3d(p + vec3(0., DX, 0.), u, v, iterations);\r\n    float z = fractal_voronoise_3d(p + vec3(0., 0., DX), u, v, iterations);\r\n    return normalize(vec3(val - x, val - y, val - z));\r\n}\r\n"},function(r,n,e){var t=function(r){"use strict";var n=Object.prototype,e=n.hasOwnProperty,t="function"==typeof Symbol?Symbol:{},o=t.iterator||"@@iterator",i=t.asyncIterator||"@@asyncIterator",a=t.toStringTag||"@@toStringTag";function c(r,n,e,t){var o=n&&n.prototype instanceof f?n:f,i=Object.create(o.prototype),a=new w(t||[]);return i._invoke=function(r,n,e){var t="suspendedStart";return function(o,i){if("executing"===t)throw new Error("Generator is already running");if("completed"===t){if("throw"===o)throw i;return P()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var c=g(a,e);if(c){if(c===s)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===t)throw t="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);t="executing";var f=l(r,n,e);if("normal"===f.type){if(t=e.done?"completed":"suspendedYield",f.arg===s)continue;return{value:f.arg,done:e.done}}"throw"===f.type&&(t="completed",e.method="throw",e.arg=f.arg)}}}(r,e,a),i}function l(r,n,e){try{return{type:"normal",arg:r.call(n,e)}}catch(r){return{type:"throw",arg:r}}}r.wrap=c;var s={};function f(){}function v(){}function _(){}var u={};u[o]=function(){return this};var d=Object.getPrototypeOf,p=d&&d(d(z([])));p&&p!==n&&e.call(p,o)&&(u=p);var h=_.prototype=f.prototype=Object.create(u);function y(r){["next","throw","return"].forEach((function(n){r[n]=function(r){return this._invoke(n,r)}}))}function x(r,n){var t;this._invoke=function(o,i){function a(){return new n((function(t,a){!function t(o,i,a,c){var s=l(r[o],r,i);if("throw"!==s.type){var f=s.arg,v=f.value;return v&&"object"==typeof v&&e.call(v,"__await")?n.resolve(v.__await).then((function(r){t("next",r,a,c)}),(function(r){t("throw",r,a,c)})):n.resolve(v).then((function(r){f.value=r,a(f)}),(function(r){return t("throw",r,a,c)}))}c(s.arg)}(o,i,t,a)}))}return t=t?t.then(a,a):a()}}function g(r,n){var e=r.iterator[n.method];if(void 0===e){if(n.delegate=null,"throw"===n.method){if(r.iterator.return&&(n.method="return",n.arg=void 0,g(r,n),"throw"===n.method))return s;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var t=l(e,r.iterator,n.arg);if("throw"===t.type)return n.method="throw",n.arg=t.arg,n.delegate=null,s;var o=t.arg;return o?o.done?(n[r.resultName]=o.value,n.next=r.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,s):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,s)}function m(r){var n={tryLoc:r[0]};1 in r&&(n.catchLoc=r[1]),2 in r&&(n.finallyLoc=r[2],n.afterLoc=r[3]),this.tryEntries.push(n)}function b(r){var n=r.completion||{};n.type="normal",delete n.arg,r.completion=n}function w(r){this.tryEntries=[{tryLoc:"root"}],r.forEach(m,this),this.reset(!0)}function z(r){if(r){var n=r[o];if(n)return n.call(r);if("function"==typeof r.next)return r;if(!isNaN(r.length)){var t=-1,i=function n(){for(;++t<r.length;)if(e.call(r,t))return n.value=r[t],n.done=!1,n;return n.value=void 0,n.done=!0,n};return i.next=i}}return{next:P}}function P(){return{value:void 0,done:!0}}return v.prototype=h.constructor=_,_.constructor=v,_[a]=v.displayName="GeneratorFunction",r.isGeneratorFunction=function(r){var n="function"==typeof r&&r.constructor;return!!n&&(n===v||"GeneratorFunction"===(n.displayName||n.name))},r.mark=function(r){return Object.setPrototypeOf?Object.setPrototypeOf(r,_):(r.__proto__=_,a in r||(r[a]="GeneratorFunction")),r.prototype=Object.create(h),r},r.awrap=function(r){return{__await:r}},y(x.prototype),x.prototype[i]=function(){return this},r.AsyncIterator=x,r.async=function(n,e,t,o,i){void 0===i&&(i=Promise);var a=new x(c(n,e,t,o),i);return r.isGeneratorFunction(e)?a:a.next().then((function(r){return r.done?r.value:a.next()}))},y(h),h[a]="Generator",h[o]=function(){return this},h.toString=function(){return"[object Generator]"},r.keys=function(r){var n=[];for(var e in r)n.push(e);return n.reverse(),function e(){for(;n.length;){var t=n.pop();if(t in r)return e.value=t,e.done=!1,e}return e.done=!0,e}},r.values=z,w.prototype={constructor:w,reset:function(r){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(b),!r)for(var n in this)"t"===n.charAt(0)&&e.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var r=this.tryEntries[0].completion;if("throw"===r.type)throw r.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function t(e,t){return a.type="throw",a.arg=r,n.next=e,t&&(n.method="next",n.arg=void 0),!!t}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return t("end");if(i.tryLoc<=this.prev){var c=e.call(i,"catchLoc"),l=e.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return t(i.catchLoc,!0);if(this.prev<i.finallyLoc)return t(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return t(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return t(i.finallyLoc)}}}},abrupt:function(r,n){for(var t=this.tryEntries.length-1;t>=0;--t){var o=this.tryEntries[t];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===r||"continue"===r)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=r,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,s):this.complete(a)},complete:function(r,n){if("throw"===r.type)throw r.arg;return"break"===r.type||"continue"===r.type?this.next=r.arg:"return"===r.type?(this.rval=this.arg=r.arg,this.method="return",this.next="end"):"normal"===r.type&&n&&(this.next=n),s},finish:function(r){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===r)return this.complete(e.completion,e.afterLoc),b(e),s}},catch:function(r){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===r){var t=e.completion;if("throw"===t.type){var o=t.arg;b(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(r,n,e){return this.delegate={iterator:z(r),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=void 0),s}},r}(r.exports);try{regeneratorRuntime=t}catch(r){Function("r","regeneratorRuntime = r")(t)}},function(r,n,e){var t={"./__global__.fsh":0,"./__raymarch__.fsh":1,"./camera.fsh":2,"./clover_noise":3,"./clover_noise_2d.fsh":4,"./clover_noise_3d.fsh":5,"./color.fsh":6,"./noise":7,"./perlin_noise":8,"./perlin_noise_2d.fsh":9,"./perlin_noise_3d.fsh":10,"./perlin_noise_4d.fsh":11,"./raymarch":12,"./sdf.fsh":13,"./simplex_noise":14,"./simplex_noise_2d.fsh":15,"./simplex_noise_3d.fsh":16,"./simplex_noise_4d.fsh":17,"./surface.fsh":18,"./voronoise":19,"./voronoise_2d.fsh":20,"./voronoise_3d.fsh":21};function o(r){var n=i(r);return e(n)}function i(r){if(!e.o(t,r)){var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}return t[r]}o.keys=function(){return Object.keys(t)},o.resolve=i,r.exports=o,o.id=23},function(r,n,e){var t={"./__global__.fsh":0,"./__raymarch__.fsh":1,"./camera.fsh":2,"./clover_noise":3,"./clover_noise_2d.fsh":4,"./clover_noise_3d.fsh":5,"./color.fsh":6,"./noise":7,"./perlin_noise":8,"./perlin_noise_2d.fsh":9,"./perlin_noise_3d.fsh":10,"./perlin_noise_4d.fsh":11,"./raymarch":12,"./sdf.fsh":13,"./simplex_noise":14,"./simplex_noise_2d.fsh":15,"./simplex_noise_3d.fsh":16,"./simplex_noise_4d.fsh":17,"./surface.fsh":18,"./voronoise":19,"./voronoise_2d.fsh":20,"./voronoise_3d.fsh":21};function o(r){var n=i(r);return e(n)}function i(r){if(!e.o(t,r)){var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}return t[r]}o.keys=function(){return Object.keys(t)},o.resolve=i,r.exports=o,o.id=24},function(r,n,e){"use strict";e.r(n);e(22);var t={initShaderProgram:function(r,n,e){var o=t.loadShader(r,r.VERTEX_SHADER,n),i=t.loadShader(r,r.FRAGMENT_SHADER,e);if(null==o||null==i)return null;var a=r.createProgram();return r.attachShader(a,o),r.attachShader(a,i),r.linkProgram(a),r.getProgramParameter(a,r.LINK_STATUS)?a:(console.groupCollapsed("Shader Sketch Program Link Error"),console.error(r.getProgramInfoLog(a)),console.groupEnd(),null)},loadShader:function(r,n,e){var t=r.createShader(n);return r.shaderSource(t,e),r.compileShader(t),r.getShaderParameter(t,r.COMPILE_STATUS)?t:(console.groupCollapsed("Shader Sketch Shader Compilation Error"),console.error(r.getShaderInfoLog(t)),console.groupCollapsed("Shader Source..."),console.log(e),console.groupEnd(),console.groupEnd(),r.deleteShader(t),null)},removeAll:function(r,n){var e=r;return n.forEach((function(r){return e=e.split(r).join("")})),e},parseUniformValues:function(){for(var r=arguments.length,n=new Array(r),e=0;e<r;e++)n[e]=arguments[e];return"string"==typeof n[0]&&(n[0]=t.removeAll(n[0],[" ","[","]"]),n=n[0].split(",").map(parseFloat)),n[0]instanceof Array&&(n=n[0]),n},textWrap:function(r,n,e){if(e==1/0)return{lines:[n],width:r.measureText(n).width};var t=[""],o=0,i=!0,a=!1,c=void 0;try{for(var l,s=n.split(" ")[Symbol.iterator]();!(i=(l=s.next()).done);i=!0){var f=l.value,v="".concat(t[t.length-1]," ").concat(f).trim(),_=r.measureText(v).width;_>e&&""!=t[t.length-1]?(t.push(f),(_=r.measureText(f).width)>o&&(o=_)):(_>o&&(o=_),t[t.length-1]=v)}}catch(r){a=!0,c=r}finally{try{i||null==s.return||s.return()}finally{if(a)throw c}}return{lines:t,width:o}},determineFontHeight:function(r){var n=document.getElementsByTagName("body")[0],e=document.createElement("div"),t=document.createTextNode("M");e.appendChild(t),e.setAttribute("style",r),n.appendChild(e);var o=e.offsetHeight;return n.removeChild(e),o},generateTypographyCanvas:function(r){var n=r.text,e=r.fontSize,o=r.fontFamily,i=r.fontStyle,a=r.fontWeight,c=r.textWrap,l=r.textAlign,s=r.margin,f=document.createElement("canvas"),v=f.getContext("2d"),_="".concat(i," ").concat(a," ").concat(e,"px ").concat(o);v.textAlign=l,v.font=_;var u=t.textWrap(v,n,c),d=u.lines,p=u.width,h=t.determineFontHeight("font: ".concat(_,";")),y=h*d.length;f.width=p+2*s,f.height=y+2*s,v.font=_,v.textBaseline="top",v.fillStyle="black",v.fillRect(0,0,f.width,f.height),v.fillStyle="white",v.translate(0,f.height),v.scale(1,-1);var x=s,g=!0,m=!1,b=void 0;try{for(var w,z=d[Symbol.iterator]();!(g=(w=z.next()).done);g=!0){var P=w.value;v.fillText(P,s,x),x+=h}}catch(r){m=!0,b=r}finally{try{g||null==z.return||z.return()}finally{if(m)throw b}}return f}},o=t;function i(r){return function(r){if(Array.isArray(r)){for(var n=0,e=new Array(r.length);n<r.length;n++)e[n]=r[n];return e}}(r)||function(r){if(Symbol.iterator in Object(r)||"[object Arguments]"===Object.prototype.toString.call(r))return Array.from(r)}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function a(r,n){if(!(r instanceof n))throw new TypeError("Cannot call a class as a function")}function c(r,n){for(var e=0;e<n.length;e++){var t=n[e];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(r,t.key,t)}}var l={int:{length:1,int:!0,setter:"1i",aliases:["int","i","int1","i1","1int","1i"]},float:{length:1,int:!1,setter:"1f",aliases:["float","f","float1","f1","1float","1f"]},ivec2:{length:2,int:!0,setter:"2i",aliases:["int2","i2","2int","2i","vec2i","ivec2"]},vec2:{length:2,int:!1,setter:"2f",aliases:["float2","f2","2float","2f","vec2"]},ivec3:{length:3,int:!0,setter:"3i",aliases:["int3","i3","3int","3i","vec3i","ivec3"]},vec3:{length:3,int:!1,setter:"3f",aliases:["float3","f3","3float","3f","vec3"]},ivec4:{length:4,int:!0,setter:"4i",aliases:["int4","i4","4int","4i","vec4i","ivec4"]},vec4:{length:4,int:!1,setter:"4f",aliases:["float4","f4","4float","4f","vec4"]}},s=function(){function r(n,e){a(this,r),this.name=n,e=r.getType(e),this.type=e.type,this.arrayLength=e.arrayLength;for(var t=arguments.length,o=new Array(t>2?t-2:0),i=2;i<t;i++)o[i-2]=arguments[i];this.setValue.apply(this,o)}var n,e,t;return n=r,t=[{key:"getType",value:function(r){var n="unknown",e=-1,t=r.split("[");for(var o in t.length>1&&(t[1]=parseInt(t[1].replace("]","")),e=t[1]),l)l[o].aliases.indexOf(t[0])>-1&&(n=o);return{type:n,arrayLength:e}}},{key:"getValue",value:function(r,n){for(var e=arguments.length,t=new Array(e>2?e-2:0),i=2;i<e;i++)t[i-2]=arguments[i];for(var a=o.parseUniformValues.apply(o,t),c=l[r].length*(n>-1?n:1);a.length<c;)a.push(0);return a=a.slice(0,c),l[r].int&&(a=a.map(Math.floor)),n>-1&&(a=[a]),a}}],(e=[{key:"setValue",value:function(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];this.value=r.getValue.apply(r,[this.type,this.arrayLength].concat(e))}},{key:"getUniformDeclaration",value:function(){return"uniform ".concat(this.type," ").concat(this.name).concat(this.arrayLength>-1?"[".concat(this.arrayLength,"]"):"",";")}},{key:"loadUniformLocation",value:function(r,n){this.location=r.getUniformLocation(n,this.name)}},{key:"setUniformValue",value:function(r){r["uniform".concat(l[this.type].setter).concat(this.arrayLength>-1?"v":"")].apply(r,[this.location].concat(i(this.value)))}}])&&c(n.prototype,e),t&&c(n,t),r}();function f(r,n){for(var e=0;e<n.length;e++){var t=n[e];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(r,t.key,t)}}function v(r){return function(r){if(Array.isArray(r)){for(var n=0,e=new Array(r.length);n<r.length;n++)e[n]=r[n];return e}}(r)||function(r){if(Symbol.iterator in Object(r)||"[object Arguments]"===Object.prototype.toString.call(r))return Array.from(r)}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var _={};var u=function(){function r(n,e){!function(r,n){if(!(r instanceof n))throw new TypeError("Cannot call a class as a function")}(this,r),this.name=n,this.code=e}var n,e,t;return n=r,t=[{key:"registerImport",value:function(n,e){_[n]=new r(n,e)}},{key:"getImport",value:function(r){return _[r]}},{key:"resolveImports",value:function(n){if(n.code instanceof Array){var e=[],t=!0,o=!1,i=void 0;try{for(var a,c=n.code[Symbol.iterator]();!(t=(a=c.next()).done);t=!0){var l=a.value;e.push.apply(e,v(r.resolveImports(r.getImport(l))))}}catch(r){o=!0,i=r}finally{try{t||null==c.return||c.return()}finally{if(o)throw i}}return e}return[n]}},{key:"resolveCode",value:function(n){n=function r(n){var e=[],t=!0,o=!1,i=void 0;try{for(var a,c=n[Symbol.iterator]();!(t=(a=c.next()).done);t=!0){var l=a.value;l instanceof Array?e.push.apply(e,v(r(l))):e.push(l)}}catch(r){o=!0,i=r}finally{try{t||null==c.return||c.return()}finally{if(o)throw i}}return e}(n.map((function(n){return r.resolveImports(n)})));var e=[],t=!0,o=!1,i=void 0;try{for(var a,c=n[Symbol.iterator]();!(t=(a=c.next()).done);t=!0){var l=a.value;-1==e.indexOf(l)&&e.push(l)}}catch(r){o=!0,i=r}finally{try{t||null==c.return||c.return()}finally{if(o)throw i}}return e.map((function(r){return r.getCode()})).join("\n")}}],(e=[{key:"getCode",value:function(){return"// --------------------\n// Import: ".concat(this.name,"\n// --------------------\n\n").concat(this.code,"\n")}}])&&f(n.prototype,e),t&&f(n,t),r}(),d=e(23),p=!0,h=!1,y=void 0;try{for(var x,g=d.keys()[Symbol.iterator]();!(p=(x=g.next()).done);p=!0){var m=x.value,b=e(24)("./".concat(m.substring(2))).default;m.endsWith(".fsh")||(b=JSON.parse(b)),m=m.replace("./","").replace(".fsh",""),_[m]=new u(m,b)}}catch(r){h=!0,y=r}finally{try{p||null==g.return||g.return()}finally{if(h)throw y}}var w=u;function z(r,n){if(!(r instanceof n))throw new TypeError("Cannot call a class as a function")}function P(r,n){for(var e=0;e<n.length;e++){var t=n[e];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(r,t.key,t)}}var S=function(){function r(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=t.blending,i=void 0===o?"linear":o,a=t.wrapping,c=void 0===a?"clamp":a,l=t.update,f=void 0!==l&&l;z(this,r),this.name=n,this.image=e,this.blending=i||"linear",this.wrapping=c||"clamp",this.shouldUpdate=f||!1,this.resolutionUniform=new s("".concat(this.name,"_resolution"),"vec2",this.image.width,this.image.height),this.uniforms=[this.resolutionUniform]}var n,e,t;return n=r,(e=[{key:"update",value:function(r){this.resolutionUniform.setValue(this.image.width,this.image.height),this.shouldUpdate&&this.bindTexture(r)}},{key:"getUniformDeclaration",value:function(){return"uniform sampler2D ".concat(this.name,";")}},{key:"loadUniformLocation",value:function(r,n){this.location=r.getUniformLocation(n,this.name)}},{key:"bindTexture",value:function(r){this.unbindTexture(r),this.texture=r.createTexture();var n,e,t=r.RGBA,o=r.RGBA,i=r.UNSIGNED_BYTE;switch(r.bindTexture(r.TEXTURE_2D,this.texture),r.texImage2D(r.TEXTURE_2D,0,t,o,i,this.image),this.blending.toLowerCase()){case"linear":n=r.LINEAR;break;case"nearest":n=r.NEAREST}switch(this.wrapping.toLowerCase()){case"repeat":e=r.REPEAT;break;case"clamp":e=r.CLAMP_TO_EDGE;break;case"mirror":e=r.MIRRORED_REPEAT}r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,n),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,e),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,e)}},{key:"unbindTexture",value:function(r){this.texture&&r.deleteTexture(this.texture)}},{key:"loadUniformLocation",value:function(r,n){this.location=r.getUniformLocation(n,this.name)}}])&&P(n.prototype,e),t&&P(n,t),r}();function E(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(r){return!1}}function k(r,n,e){return(k=E()?Reflect.construct:function(r,n,e){var t=[null];t.push.apply(t,n);var o=new(Function.bind.apply(r,t));return e&&D(o,e.prototype),o}).apply(null,arguments)}function D(r,n){return(D=Object.setPrototypeOf||function(r,n){return r.__proto__=n,r})(r,n)}function T(r){return function(r){if(Array.isArray(r)){for(var n=0,e=new Array(r.length);n<r.length;n++)e[n]=r[n];return e}}(r)||function(r){if(Symbol.iterator in Object(r)||"[object Arguments]"===Object.prototype.toString.call(r))return Array.from(r)}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function O(r,n){for(var e=0;e<n.length;e++){var t=n[e];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(r,t.key,t)}}var C=["TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","TEXTURE4","TEXTURE5","TEXTURE6","TEXTURE7"],R=function(){function r(n){!function(r,n){if(!(r instanceof n))throw new TypeError("Cannot call a class as a function")}(this,r),this.element=n,this.gl=n.canvasElt.getContext("webgl"),this.uniforms=[],this.textures=[],this.imports=["__global__"],this.program=null,this.shouldCompileProgram=!0,this.positionBuffer=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.positionBuffer),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,-1,-1,1,1,-1,1,1]),this.gl.STATIC_DRAW),this.addUniform("viewportSize","vec2",0,0),this.frameCount=0,this.addUniform("frameCount","int",0),this.startTime=new Date,this.addUniform("timeElapsed","float",0),this.addUniform("mousePosition","vec2",0,0),this.addUniform("mouseState","int",0)}var n,e,t;return n=r,(e=[{key:"getExtraFragmentCode",value:function(){var r="precision highp float;",n=!0,e=!1,t=void 0;try{for(var o,i=this.getUniforms()[Symbol.iterator]();!(n=(o=i.next()).done);n=!0){var a=o.value;r+="\n".concat(a.getUniformDeclaration())}}catch(r){e=!0,t=r}finally{try{n||null==i.return||i.return()}finally{if(e)throw t}}var c=!0,l=!1,s=void 0;try{for(var f,v=this.textures[Symbol.iterator]();!(c=(f=v.next()).done);c=!0){var _=f.value;r+="\n".concat(_.getUniformDeclaration())}}catch(r){l=!0,s=r}finally{try{c||null==v.return||v.return()}finally{if(l)throw s}}return r+="\n"+w.resolveCode(this.imports.map((function(r){return w.getImport(r)})))}},{key:"compileProgram",value:function(){this.shouldCompileProgram=!1;var r="void main() {\n\tgl_FragColor = vec4(gl_FragCoord.xy / viewportSize, 0., 1.);\n}";if(null!=this.element.fragmentShaderElt&&(r=this.element.fragmentShaderElt.textContent),r=this.getExtraFragmentCode()+"\n"+r,this.program=o.initShaderProgram(this.gl,"attribute vec4 position;\n\nvoid main() {\n\tgl_Position = position;\n}",r),null!=this.program){var n=!0,e=!1,t=void 0;try{for(var i,a=this.getUniforms()[Symbol.iterator]();!(n=(i=a.next()).done);n=!0)i.value.loadUniformLocation(this.gl,this.program)}catch(r){e=!0,t=r}finally{try{n||null==a.return||a.return()}finally{if(e)throw t}}var c=!0,l=!1,s=void 0;try{for(var f,v=this.textures[Symbol.iterator]();!(c=(f=v.next()).done);c=!0)f.value.loadUniformLocation(this.gl,this.program)}catch(r){l=!0,s=r}finally{try{c||null==v.return||v.return()}finally{if(l)throw s}}}}},{key:"canRender",value:function(){return null!=this.program}},{key:"render",value:function(){if(this.shouldCompileProgram&&this.compileProgram(),this.canRender()){this.frameCount++,this.setUniform("frameCount",this.frameCount),this.setUniform("timeElapsed",(new Date-this.startTime)/1e3),this.gl.useProgram(this.program),this.bindTextures();var r=!0,n=!1,e=void 0;try{for(var t,o=this.getUniforms()[Symbol.iterator]();!(r=(t=o.next()).done);r=!0)t.value.setUniformValue(this.gl)}catch(r){n=!0,e=r}finally{try{r||null==o.return||o.return()}finally{if(n)throw e}}this.gl.clearColor(0,0,0,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT);var i=this.gl.FLOAT,a=this.gl.getAttribLocation(this.program,"position");this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.positionBuffer),this.gl.vertexAttribPointer(a,2,i,!1,0,0),this.gl.enableVertexAttribArray(a),this.gl.drawArrays(this.gl.TRIANGLES,0,6)}}},{key:"bindTextures",value:function(){var r=0,n=!0,e=!1,t=void 0;try{for(var o,i=this.textures[Symbol.iterator]();!(n=(o=i.next()).done);n=!0){var a=o.value;if(r>C.length)break;a.update(this.gl);var c=this.gl[C[r]];this.gl.activeTexture(c),this.gl.bindTexture(this.gl.TEXTURE_2D,a.texture),this.gl.uniform1i(a.location,r),r++}}catch(r){e=!0,t=r}finally{try{n||null==i.return||i.return()}finally{if(e)throw t}}}},{key:"getUniforms",value:function(){var r=this.uniforms,n=!0,e=!1,t=void 0;try{for(var o,i=this.textures[Symbol.iterator]();!(n=(o=i.next()).done);n=!0){var a=o.value;r=[].concat(T(r),T(a.uniforms))}}catch(r){e=!0,t=r}finally{try{n||null==i.return||i.return()}finally{if(e)throw t}}return r}},{key:"addUniform",value:function(r,n){for(var e=arguments.length,t=new Array(e>2?e-2:0),o=2;o<e;o++)t[o-2]=arguments[o];this.uniforms.push(k(s,[r,n].concat(t))),this.shouldCompileProgram=!0}},{key:"getUniform",value:function(r){var n=!0,e=!1,t=void 0;try{for(var o,i=this.getUniforms()[Symbol.iterator]();!(n=(o=i.next()).done);n=!0){var a=o.value;if(a.name==r)return a}}catch(r){e=!0,t=r}finally{try{n||null==i.return||i.return()}finally{if(e)throw t}}return null}},{key:"setUniform",value:function(r){var n=this.getUniform(r);if(null!=n){for(var e=arguments.length,t=new Array(e>1?e-1:0),o=1;o<e;o++)t[o-1]=arguments[o];n.setValue.apply(n,t)}}},{key:"addTexture",value:function(){for(var r=arguments.length,n=new Array(r),e=0;e<r;e++)n[e]=arguments[e];var t=k(S,n);t.bindTexture(this.gl),this.textures.push(t)}},{key:"getTexture",value:function(r){var n=!0,e=!1,t=void 0;try{for(var o,i=this.textures[Symbol.iterator]();!(n=(o=i.next()).done);n=!0){var a=o.value;if(a.name==r)return a}}catch(r){e=!0,t=r}finally{try{n||null==i.return||i.return()}finally{if(e)throw t}}return null}},{key:"deleteTexture",value:function(r){var n=this.getTexture(r);null!=n&&(n.unbindTexture(this.gl),this.textures.splice(this.textures.indexOf(n),1))}}])&&O(n.prototype,e),t&&O(n,t),r}();function X(r){return(X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r})(r)}function A(r,n){if(!(r instanceof n))throw new TypeError("Cannot call a class as a function")}function j(r,n){for(var e=0;e<n.length;e++){var t=n[e];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(r,t.key,t)}}function U(r,n){return!n||"object"!==X(n)&&"function"!=typeof n?function(r){if(void 0===r)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return r}(r):n}function I(r){var n="function"==typeof Map?new Map:void 0;return(I=function(r){if(null===r||(e=r,-1===Function.toString.call(e).indexOf("[native code]")))return r;var e;if("function"!=typeof r)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(r))return n.get(r);n.set(r,t)}function t(){return M(r,arguments,N(this).constructor)}return t.prototype=Object.create(r.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),F(t,r)})(r)}function L(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(r){return!1}}function M(r,n,e){return(M=L()?Reflect.construct:function(r,n,e){var t=[null];t.push.apply(t,n);var o=new(Function.bind.apply(r,t));return e&&F(o,e.prototype),o}).apply(null,arguments)}function F(r,n){return(F=Object.setPrototypeOf||function(r,n){return r.__proto__=n,r})(r,n)}function N(r){return(N=Object.setPrototypeOf?Object.getPrototypeOf:function(r){return r.__proto__||Object.getPrototypeOf(r)})(r)}var q=function(r){function n(){return A(this,n),U(this,N(n).apply(this,arguments))}var e,t,o;return function(r,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");r.prototype=Object.create(n&&n.prototype,{constructor:{value:r,writable:!0,configurable:!0}}),n&&F(r,n)}(n,r),e=n,(t=[{key:"connectedCallback",value:function(){this.update(this.parentNode)}},{key:"update",value:function(r){r instanceof J&&(this.parent=r,this.parent.updateChild({child:this,add:!0}))}},{key:"disconnectedCallback",value:function(){this.parent instanceof J&&(this.parent.updateChild({child:this,add:!1}),this.parent=null)}}])&&j(e.prototype,t),o&&j(e,o),n}(I(HTMLElement));function B(r){return(B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r})(r)}function G(r,n){for(var e=0;e<n.length;e++){var t=n[e];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(r,t.key,t)}}function V(r,n){return!n||"object"!==B(n)&&"function"!=typeof n?function(r){if(void 0===r)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return r}(r):n}function H(r){var n="function"==typeof Map?new Map:void 0;return(H=function(r){if(null===r||(e=r,-1===Function.toString.call(e).indexOf("[native code]")))return r;var e;if("function"!=typeof r)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(r))return n.get(r);n.set(r,t)}function t(){return W(r,arguments,Z(this).constructor)}return t.prototype=Object.create(r.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),K(t,r)})(r)}function Y(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(r){return!1}}function W(r,n,e){return(W=Y()?Reflect.construct:function(r,n,e){var t=[null];t.push.apply(t,n);var o=new(Function.bind.apply(r,t));return e&&K(o,e.prototype),o}).apply(null,arguments)}function K(r,n){return(K=Object.setPrototypeOf||function(r,n){return r.__proto__=n,r})(r,n)}function Z(r){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(r){return r.__proto__||Object.getPrototypeOf(r)})(r)}var J=function(r){function n(){var r;return function(r,n){if(!(r instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(r=V(this,Z(n).call(this))).shadow=r.attachShadow({mode:"open"}),r.styleElt=document.createElement("style"),r.styleElt.textContent=":host {\n\tposition: relative;\n\tdisplay: inline-block;\n\twidth: 250px;\n\theight: 250px;\n}\n\n:host > canvas {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n}",r.canvasElt=document.createElement("canvas"),r.shadow.appendChild(r.styleElt),r.shadow.appendChild(r.canvasElt),r.mounted=!1,r.loadingTextures=[],r.fragmentShaderElt=null,r}var e,t,i;return function(r,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");r.prototype=Object.create(n&&n.prototype,{constructor:{value:r,writable:!0,configurable:!0}}),n&&K(r,n)}(n,r),e=n,(t=[{key:"getMousePosition",value:function(r){return[r.x-this.rect.x,this.height-r.y+this.rect.y]}},{key:"connectedCallback",value:function(){var r=this;this.mounted=!0,this.shaderSketch=new R(this),this.onmousedown=function(n){r.setUniform("mousePosition",r.getMousePosition(n)),r.setUniform("mouseState",1)},this.onmousemove=function(n){r.setUniform("mousePosition",r.getMousePosition(n))},this.onmouseup=function(n){r.setUniform("mousePosition",r.getMousePosition(n)),r.setUniform("mouseState",0)};var n=!0,e=!1,t=void 0;try{for(var o,i=this.childNodes[Symbol.iterator]();!(n=(o=i.next()).done);n=!0){var a=o.value;a instanceof q&&a.update(this)}}catch(r){e=!0,t=r}finally{try{n||null==i.return||i.return()}finally{if(e)throw t}}this.render()}},{key:"disconnectedCallback",value:function(){this.mounted=!1,this.shaderSketch=null,this.onmousedown=null,this.onmousemove=null,this.onmouseup=null}},{key:"updateChild",value:function(r){var n=this,e=r.child,t=r.add;switch(e.tagName.toLowerCase()){case"fragment-shader":this.fragmentShaderElt=t?e:null;break;case"shader-uniform":if(!t)break;var i=e.getAttribute("name"),a=e.getAttribute("type"),c=e.getAttribute("value");null==this.getUniform(i)?this.addUniform(i,a,c):this.setUniform(i,c);break;case"shader-import":var l=e.getAttribute("name");t?this.shaderSketch.imports.push(l):this.shaderSketch.imports.splice(this.shaderSketch.imports.indexOf(l),-1);break;case"shader-texture":var s=e.getAttribute("name"),f=e.getAttribute("src"),v=e.getAttribute("blending"),_=e.getAttribute("wrapping");if(t){if(null==this.shaderSketch.getTexture(s)&&-1==this.loadingTextures.indexOf(s)){this.loadingTextures.push(s);var u=new Image;u.onload=function(){n.addTexture(s,u,{blending:v,wrapping:_,update:!1})},u.src=f}}else this.shaderSketch.deleteTexture(s);break;case"shader-canvas-texture":var d=e.getAttribute("name"),p=e.getAttribute("selector"),h=e.getAttribute("blending"),y=e.getAttribute("wrapping");if(t){var x=document.querySelector(p);if(null==x)break;"shader-sketch"==x.tagName.toLowerCase()&&(x=x.canvasElt),this.addTexture(d,x,{blending:h,wrapping:y,update:!0})}else this.shaderSketch.deleteTexture(d);break;case"shader-typography":var g,m,b,w,z,P,S,E=e.getAttribute("name"),k=e.textContent,D=null!==(g=parseFloat(e.getAttribute("font-size")))&&void 0!==g?g:24,T=null!==(m=e.getAttribute("font-family"))&&void 0!==m?m:"sans-serif",O=null!==(b=e.getAttribute("font-style"))&&void 0!==b?b:"normal",C=null!==(w=e.getAttribute("font-weight"))&&void 0!==w?w:"normal",R=null!==(z=parseFloat(e.getAttribute("text-wrap")))&&void 0!==z?z:1/0,X=null!==(P=e.getAttribute("text-align"))&&void 0!==P?P:"center",A=null!==(S=parseFloat(e.getAttribute("margin")))&&void 0!==S?S:0,j=e.getAttribute("blending"),U=e.getAttribute("wrapping");if(t){var I=o.generateTypographyCanvas({text:k,fontSize:D,fontFamily:T,fontStyle:O,fontWeight:C,textWrap:R,textAlign:X,margin:A});this.addTexture(E,I,{blending:j,wrapping:U,update:!1})}else this.shaderSketch.deleteTexture(E)}this.shaderSketch.shouldCompileProgram=!0}},{key:"render",value:function(){var r=this;this.mounted&&requestAnimationFrame((function(){r.render()})),this.updateSize(),this.shaderSketch.render()}},{key:"updateSize",value:function(){this.rect=this.getBoundingClientRect();var r=this.rect,n=r.width,e=r.height,t=this.width,o=this.height;n==t&&e==o||(this.width=n,this.height=e,this.canvasElt.width=n,this.canvasElt.style.width=n>=1?n:1,this.canvasElt.height=e,this.canvasElt.style.height=e>=1?e:1,this.shaderSketch.gl.viewport(0,0,n,e),this.setUniform("viewportSize",n,e))}},{key:"addUniform",value:function(){var r;(r=this.shaderSketch).addUniform.apply(r,arguments)}},{key:"getUniform",value:function(){var r;return(r=this.shaderSketch).getUniform.apply(r,arguments)}},{key:"setUniform",value:function(){var r;(r=this.shaderSketch).setUniform.apply(r,arguments)}},{key:"addTexture",value:function(r,n,e){var t=e.blending,o=e.wrapping,i=e.update;this.shaderSketch.addTexture(r,n,{blending:t,wrapping:o,update:i}),this.shaderSketch.shouldCompileProgram=!0,this.loadingTextures.indexOf(r)>-1&&this.loadingTextures.splice(this.loadingTextures.indexOf(r),1)}}])&&G(e.prototype,t),i&&G(e,i),n}(H(HTMLElement));function Q(r){return(Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r})(r)}function $(r,n){if(!(r instanceof n))throw new TypeError("Cannot call a class as a function")}function rr(r,n){return!n||"object"!==Q(n)&&"function"!=typeof n?function(r){if(void 0===r)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return r}(r):n}function nr(r){return(nr=Object.setPrototypeOf?Object.getPrototypeOf:function(r){return r.__proto__||Object.getPrototypeOf(r)})(r)}function er(r,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");r.prototype=Object.create(n&&n.prototype,{constructor:{value:r,writable:!0,configurable:!0}}),n&&tr(r,n)}function tr(r,n){return(tr=Object.setPrototypeOf||function(r,n){return r.__proto__=n,r})(r,n)}customElements.define("fragment-shader",function(r){function n(){return $(this,n),rr(this,nr(n).apply(this,arguments))}return er(n,r),n}(q)),customElements.define("shader-uniform",function(r){function n(){return $(this,n),rr(this,nr(n).apply(this,arguments))}return er(n,r),n}(q)),customElements.define("shader-import",function(r){function n(){return $(this,n),rr(this,nr(n).apply(this,arguments))}return er(n,r),n}(q)),customElements.define("shader-texture",function(r){function n(){return $(this,n),rr(this,nr(n).apply(this,arguments))}return er(n,r),n}(q)),customElements.define("shader-canvas-texture",function(r){function n(){return $(this,n),rr(this,nr(n).apply(this,arguments))}return er(n,r),n}(q)),customElements.define("shader-typography",function(r){function n(){return $(this,n),rr(this,nr(n).apply(this,arguments))}return er(n,r),n}(q)),customElements.define("shader-sketch",J)}]);